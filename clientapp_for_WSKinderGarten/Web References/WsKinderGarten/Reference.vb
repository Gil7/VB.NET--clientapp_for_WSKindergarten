'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34014.
'
Namespace WsKinderGarten
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private WS_get_all_studentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_create_studentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_find_studentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_update_studentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_delete_studentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_get_all_tutorsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_find_tutorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_update_tutorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_delete_tutorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_create_tutorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_get_all_phonesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_create_phoneOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_update_phoneOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_find_phoneOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_delete_phoneOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_get_all_accountsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_create_accountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_find_accoutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_update_accountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_delete_accountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_get_all_chargesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_create_chargeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Ws_update_chargeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_find_chargeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_delete_chargeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_get_all_menusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_create_menuOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_find_menuOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_update_menuOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_delete_menuOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_get_all_saucersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_create_saucerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_find_saucerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_update_saucerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_delete_saucerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_get_all_consumptionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_create_consumptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_find_consumptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_update_consumptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_delete_consumptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_get_all_ingredientsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_create_ingredientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_find_ingredientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_update_ingredientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_delete_ingredientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_get_all_ingredients_saucersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_create_ingredient_saucerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_find_ingredient_saucerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_update_ingredient_saucerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_delete_ingredient_saucerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_get_all_allergiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_create_alergyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_find_allergyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_update_alergyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_delete_alergyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.clientapp_for_WSKinderGarten.My.MySettings.Default.clientapp_for_WSKinderGarten_WsKinderGarten_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event WS_get_all_studentsCompleted As WS_get_all_studentsCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_create_studentCompleted As WS_create_studentCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_find_studentCompleted As WS_find_studentCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_update_studentCompleted As WS_update_studentCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_delete_studentCompleted As WS_delete_studentCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_get_all_tutorsCompleted As WS_get_all_tutorsCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_find_tutorCompleted As WS_find_tutorCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_update_tutorCompleted As WS_update_tutorCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_delete_tutorCompleted As WS_delete_tutorCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_create_tutorCompleted As WS_create_tutorCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_get_all_phonesCompleted As WS_get_all_phonesCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_create_phoneCompleted As WS_create_phoneCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_update_phoneCompleted As WS_update_phoneCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_find_phoneCompleted As WS_find_phoneCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_delete_phoneCompleted As WS_delete_phoneCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_get_all_accountsCompleted As WS_get_all_accountsCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_create_accountCompleted As WS_create_accountCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_find_accoutCompleted As WS_find_accoutCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_update_accountCompleted As WS_update_accountCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_delete_accountCompleted As WS_delete_accountCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_get_all_chargesCompleted As WS_get_all_chargesCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_create_chargeCompleted As WS_create_chargeCompletedEventHandler
        
        '''<remarks/>
        Public Event Ws_update_chargeCompleted As Ws_update_chargeCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_find_chargeCompleted As WS_find_chargeCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_delete_chargeCompleted As WS_delete_chargeCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_get_all_menusCompleted As WS_get_all_menusCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_create_menuCompleted As WS_create_menuCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_find_menuCompleted As WS_find_menuCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_update_menuCompleted As WS_update_menuCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_delete_menuCompleted As WS_delete_menuCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_get_all_saucersCompleted As WS_get_all_saucersCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_create_saucerCompleted As WS_create_saucerCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_find_saucerCompleted As WS_find_saucerCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_update_saucerCompleted As WS_update_saucerCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_delete_saucerCompleted As WS_delete_saucerCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_get_all_consumptionsCompleted As WS_get_all_consumptionsCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_create_consumptionCompleted As WS_create_consumptionCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_find_consumptionCompleted As WS_find_consumptionCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_update_consumptionCompleted As WS_update_consumptionCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_delete_consumptionCompleted As WS_delete_consumptionCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_get_all_ingredientsCompleted As WS_get_all_ingredientsCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_create_ingredientCompleted As WS_create_ingredientCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_find_ingredientCompleted As WS_find_ingredientCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_update_ingredientCompleted As WS_update_ingredientCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_delete_ingredientCompleted As WS_delete_ingredientCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_get_all_ingredients_saucersCompleted As WS_get_all_ingredients_saucersCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_create_ingredient_saucerCompleted As WS_create_ingredient_saucerCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_find_ingredient_saucerCompleted As WS_find_ingredient_saucerCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_update_ingredient_saucerCompleted As WS_update_ingredient_saucerCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_delete_ingredient_saucerCompleted As WS_delete_ingredient_saucerCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_get_all_allergiesCompleted As WS_get_all_allergiesCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_create_alergyCompleted As WS_create_alergyCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_find_allergyCompleted As WS_find_allergyCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_update_alergyCompleted As WS_update_alergyCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_delete_alergyCompleted As WS_delete_alergyCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_get_all_students", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_get_all_students() As Datos
            Dim results() As Object = Me.Invoke("WS_get_all_students", New Object(-1) {})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_studentsAsync()
            Me.WS_get_all_studentsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_studentsAsync(ByVal userState As Object)
            If (Me.WS_get_all_studentsOperationCompleted Is Nothing) Then
                Me.WS_get_all_studentsOperationCompleted = AddressOf Me.OnWS_get_all_studentsOperationCompleted
            End If
            Me.InvokeAsync("WS_get_all_students", New Object(-1) {}, Me.WS_get_all_studentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_get_all_studentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_get_all_studentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_get_all_studentsCompleted(Me, New WS_get_all_studentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_create_student", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_create_student(ByVal matricula As String, ByVal nombre As String, ByVal ap As String, ByVal am As String, ByVal fecha_ingreso As String, ByVal fecha_baja As String) As String
            Dim results() As Object = Me.Invoke("WS_create_student", New Object() {matricula, nombre, ap, am, fecha_ingreso, fecha_baja})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_create_studentAsync(ByVal matricula As String, ByVal nombre As String, ByVal ap As String, ByVal am As String, ByVal fecha_ingreso As String, ByVal fecha_baja As String)
            Me.WS_create_studentAsync(matricula, nombre, ap, am, fecha_ingreso, fecha_baja, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_create_studentAsync(ByVal matricula As String, ByVal nombre As String, ByVal ap As String, ByVal am As String, ByVal fecha_ingreso As String, ByVal fecha_baja As String, ByVal userState As Object)
            If (Me.WS_create_studentOperationCompleted Is Nothing) Then
                Me.WS_create_studentOperationCompleted = AddressOf Me.OnWS_create_studentOperationCompleted
            End If
            Me.InvokeAsync("WS_create_student", New Object() {matricula, nombre, ap, am, fecha_ingreso, fecha_baja}, Me.WS_create_studentOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_create_studentOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_create_studentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_create_studentCompleted(Me, New WS_create_studentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_find_student", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_find_student(ByVal matricula As String) As Datos
            Dim results() As Object = Me.Invoke("WS_find_student", New Object() {matricula})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_find_studentAsync(ByVal matricula As String)
            Me.WS_find_studentAsync(matricula, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_find_studentAsync(ByVal matricula As String, ByVal userState As Object)
            If (Me.WS_find_studentOperationCompleted Is Nothing) Then
                Me.WS_find_studentOperationCompleted = AddressOf Me.OnWS_find_studentOperationCompleted
            End If
            Me.InvokeAsync("WS_find_student", New Object() {matricula}, Me.WS_find_studentOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_find_studentOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_find_studentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_find_studentCompleted(Me, New WS_find_studentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_update_student", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_update_student(ByVal matricula As String, ByVal nombre As String, ByVal ap As String, ByVal am As String, ByVal fecha_ingreso As String, ByVal fecha_baja As String) As String
            Dim results() As Object = Me.Invoke("WS_update_student", New Object() {matricula, nombre, ap, am, fecha_ingreso, fecha_baja})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_update_studentAsync(ByVal matricula As String, ByVal nombre As String, ByVal ap As String, ByVal am As String, ByVal fecha_ingreso As String, ByVal fecha_baja As String)
            Me.WS_update_studentAsync(matricula, nombre, ap, am, fecha_ingreso, fecha_baja, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_update_studentAsync(ByVal matricula As String, ByVal nombre As String, ByVal ap As String, ByVal am As String, ByVal fecha_ingreso As String, ByVal fecha_baja As String, ByVal userState As Object)
            If (Me.WS_update_studentOperationCompleted Is Nothing) Then
                Me.WS_update_studentOperationCompleted = AddressOf Me.OnWS_update_studentOperationCompleted
            End If
            Me.InvokeAsync("WS_update_student", New Object() {matricula, nombre, ap, am, fecha_ingreso, fecha_baja}, Me.WS_update_studentOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_update_studentOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_update_studentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_update_studentCompleted(Me, New WS_update_studentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_delete_student", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_delete_student(ByVal matricula As String) As String
            Dim results() As Object = Me.Invoke("WS_delete_student", New Object() {matricula})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_delete_studentAsync(ByVal matricula As String)
            Me.WS_delete_studentAsync(matricula, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_delete_studentAsync(ByVal matricula As String, ByVal userState As Object)
            If (Me.WS_delete_studentOperationCompleted Is Nothing) Then
                Me.WS_delete_studentOperationCompleted = AddressOf Me.OnWS_delete_studentOperationCompleted
            End If
            Me.InvokeAsync("WS_delete_student", New Object() {matricula}, Me.WS_delete_studentOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_delete_studentOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_delete_studentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_delete_studentCompleted(Me, New WS_delete_studentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_get_all_tutors", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_get_all_tutors() As Datos
            Dim results() As Object = Me.Invoke("WS_get_all_tutors", New Object(-1) {})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_tutorsAsync()
            Me.WS_get_all_tutorsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_tutorsAsync(ByVal userState As Object)
            If (Me.WS_get_all_tutorsOperationCompleted Is Nothing) Then
                Me.WS_get_all_tutorsOperationCompleted = AddressOf Me.OnWS_get_all_tutorsOperationCompleted
            End If
            Me.InvokeAsync("WS_get_all_tutors", New Object(-1) {}, Me.WS_get_all_tutorsOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_get_all_tutorsOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_get_all_tutorsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_get_all_tutorsCompleted(Me, New WS_get_all_tutorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_find_tutor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_find_tutor(ByVal dni As String) As Datos
            Dim results() As Object = Me.Invoke("WS_find_tutor", New Object() {dni})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_find_tutorAsync(ByVal dni As String)
            Me.WS_find_tutorAsync(dni, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_find_tutorAsync(ByVal dni As String, ByVal userState As Object)
            If (Me.WS_find_tutorOperationCompleted Is Nothing) Then
                Me.WS_find_tutorOperationCompleted = AddressOf Me.OnWS_find_tutorOperationCompleted
            End If
            Me.InvokeAsync("WS_find_tutor", New Object() {dni}, Me.WS_find_tutorOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_find_tutorOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_find_tutorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_find_tutorCompleted(Me, New WS_find_tutorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_update_tutor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_update_tutor(ByVal dni As String, ByVal nombre As String, ByVal ap As String, ByVal am As String, ByVal direccion As String, ByVal parentesco As String, ByVal tutorado As String) As Boolean
            Dim results() As Object = Me.Invoke("WS_update_tutor", New Object() {dni, nombre, ap, am, direccion, parentesco, tutorado})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_update_tutorAsync(ByVal dni As String, ByVal nombre As String, ByVal ap As String, ByVal am As String, ByVal direccion As String, ByVal parentesco As String, ByVal tutorado As String)
            Me.WS_update_tutorAsync(dni, nombre, ap, am, direccion, parentesco, tutorado, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_update_tutorAsync(ByVal dni As String, ByVal nombre As String, ByVal ap As String, ByVal am As String, ByVal direccion As String, ByVal parentesco As String, ByVal tutorado As String, ByVal userState As Object)
            If (Me.WS_update_tutorOperationCompleted Is Nothing) Then
                Me.WS_update_tutorOperationCompleted = AddressOf Me.OnWS_update_tutorOperationCompleted
            End If
            Me.InvokeAsync("WS_update_tutor", New Object() {dni, nombre, ap, am, direccion, parentesco, tutorado}, Me.WS_update_tutorOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_update_tutorOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_update_tutorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_update_tutorCompleted(Me, New WS_update_tutorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_delete_tutor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_delete_tutor(ByVal dni As String) As String
            Dim results() As Object = Me.Invoke("WS_delete_tutor", New Object() {dni})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_delete_tutorAsync(ByVal dni As String)
            Me.WS_delete_tutorAsync(dni, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_delete_tutorAsync(ByVal dni As String, ByVal userState As Object)
            If (Me.WS_delete_tutorOperationCompleted Is Nothing) Then
                Me.WS_delete_tutorOperationCompleted = AddressOf Me.OnWS_delete_tutorOperationCompleted
            End If
            Me.InvokeAsync("WS_delete_tutor", New Object() {dni}, Me.WS_delete_tutorOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_delete_tutorOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_delete_tutorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_delete_tutorCompleted(Me, New WS_delete_tutorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_create_tutor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_create_tutor(ByVal dni As String, ByVal nombre As String, ByVal ap As String, ByVal am As String, ByVal direccion As String, ByVal parentesco As String, ByVal tutorado As String) As String
            Dim results() As Object = Me.Invoke("WS_create_tutor", New Object() {dni, nombre, ap, am, direccion, parentesco, tutorado})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_create_tutorAsync(ByVal dni As String, ByVal nombre As String, ByVal ap As String, ByVal am As String, ByVal direccion As String, ByVal parentesco As String, ByVal tutorado As String)
            Me.WS_create_tutorAsync(dni, nombre, ap, am, direccion, parentesco, tutorado, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_create_tutorAsync(ByVal dni As String, ByVal nombre As String, ByVal ap As String, ByVal am As String, ByVal direccion As String, ByVal parentesco As String, ByVal tutorado As String, ByVal userState As Object)
            If (Me.WS_create_tutorOperationCompleted Is Nothing) Then
                Me.WS_create_tutorOperationCompleted = AddressOf Me.OnWS_create_tutorOperationCompleted
            End If
            Me.InvokeAsync("WS_create_tutor", New Object() {dni, nombre, ap, am, direccion, parentesco, tutorado}, Me.WS_create_tutorOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_create_tutorOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_create_tutorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_create_tutorCompleted(Me, New WS_create_tutorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_get_all_phones", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_get_all_phones() As Datos
            Dim results() As Object = Me.Invoke("WS_get_all_phones", New Object(-1) {})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_phonesAsync()
            Me.WS_get_all_phonesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_phonesAsync(ByVal userState As Object)
            If (Me.WS_get_all_phonesOperationCompleted Is Nothing) Then
                Me.WS_get_all_phonesOperationCompleted = AddressOf Me.OnWS_get_all_phonesOperationCompleted
            End If
            Me.InvokeAsync("WS_get_all_phones", New Object(-1) {}, Me.WS_get_all_phonesOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_get_all_phonesOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_get_all_phonesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_get_all_phonesCompleted(Me, New WS_get_all_phonesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_create_phone", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_create_phone(ByVal numero As String, ByVal dni As String) As String
            Dim results() As Object = Me.Invoke("WS_create_phone", New Object() {numero, dni})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_create_phoneAsync(ByVal numero As String, ByVal dni As String)
            Me.WS_create_phoneAsync(numero, dni, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_create_phoneAsync(ByVal numero As String, ByVal dni As String, ByVal userState As Object)
            If (Me.WS_create_phoneOperationCompleted Is Nothing) Then
                Me.WS_create_phoneOperationCompleted = AddressOf Me.OnWS_create_phoneOperationCompleted
            End If
            Me.InvokeAsync("WS_create_phone", New Object() {numero, dni}, Me.WS_create_phoneOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_create_phoneOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_create_phoneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_create_phoneCompleted(Me, New WS_create_phoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_update_phone", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_update_phone(ByVal numero As String, ByVal dni As String, ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_update_phone", New Object() {numero, dni, id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_update_phoneAsync(ByVal numero As String, ByVal dni As String, ByVal id As Integer)
            Me.WS_update_phoneAsync(numero, dni, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_update_phoneAsync(ByVal numero As String, ByVal dni As String, ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_update_phoneOperationCompleted Is Nothing) Then
                Me.WS_update_phoneOperationCompleted = AddressOf Me.OnWS_update_phoneOperationCompleted
            End If
            Me.InvokeAsync("WS_update_phone", New Object() {numero, dni, id}, Me.WS_update_phoneOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_update_phoneOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_update_phoneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_update_phoneCompleted(Me, New WS_update_phoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_find_phone", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_find_phone(ByVal id As Integer) As Datos
            Dim results() As Object = Me.Invoke("WS_find_phone", New Object() {id})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_find_phoneAsync(ByVal id As Integer)
            Me.WS_find_phoneAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_find_phoneAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_find_phoneOperationCompleted Is Nothing) Then
                Me.WS_find_phoneOperationCompleted = AddressOf Me.OnWS_find_phoneOperationCompleted
            End If
            Me.InvokeAsync("WS_find_phone", New Object() {id}, Me.WS_find_phoneOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_find_phoneOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_find_phoneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_find_phoneCompleted(Me, New WS_find_phoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_delete_phone", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_delete_phone(ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_delete_phone", New Object() {id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_delete_phoneAsync(ByVal id As Integer)
            Me.WS_delete_phoneAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_delete_phoneAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_delete_phoneOperationCompleted Is Nothing) Then
                Me.WS_delete_phoneOperationCompleted = AddressOf Me.OnWS_delete_phoneOperationCompleted
            End If
            Me.InvokeAsync("WS_delete_phone", New Object() {id}, Me.WS_delete_phoneOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_delete_phoneOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_delete_phoneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_delete_phoneCompleted(Me, New WS_delete_phoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_get_all_accounts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_get_all_accounts() As Datos
            Dim results() As Object = Me.Invoke("WS_get_all_accounts", New Object(-1) {})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_accountsAsync()
            Me.WS_get_all_accountsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_accountsAsync(ByVal userState As Object)
            If (Me.WS_get_all_accountsOperationCompleted Is Nothing) Then
                Me.WS_get_all_accountsOperationCompleted = AddressOf Me.OnWS_get_all_accountsOperationCompleted
            End If
            Me.InvokeAsync("WS_get_all_accounts", New Object(-1) {}, Me.WS_get_all_accountsOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_get_all_accountsOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_get_all_accountsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_get_all_accountsCompleted(Me, New WS_get_all_accountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_create_account", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_create_account(ByVal numero As String, ByVal dni As String) As String
            Dim results() As Object = Me.Invoke("WS_create_account", New Object() {numero, dni})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_create_accountAsync(ByVal numero As String, ByVal dni As String)
            Me.WS_create_accountAsync(numero, dni, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_create_accountAsync(ByVal numero As String, ByVal dni As String, ByVal userState As Object)
            If (Me.WS_create_accountOperationCompleted Is Nothing) Then
                Me.WS_create_accountOperationCompleted = AddressOf Me.OnWS_create_accountOperationCompleted
            End If
            Me.InvokeAsync("WS_create_account", New Object() {numero, dni}, Me.WS_create_accountOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_create_accountOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_create_accountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_create_accountCompleted(Me, New WS_create_accountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_find_accout", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_find_accout(ByVal id As Integer) As Datos
            Dim results() As Object = Me.Invoke("WS_find_accout", New Object() {id})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_find_accoutAsync(ByVal id As Integer)
            Me.WS_find_accoutAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_find_accoutAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_find_accoutOperationCompleted Is Nothing) Then
                Me.WS_find_accoutOperationCompleted = AddressOf Me.OnWS_find_accoutOperationCompleted
            End If
            Me.InvokeAsync("WS_find_accout", New Object() {id}, Me.WS_find_accoutOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_find_accoutOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_find_accoutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_find_accoutCompleted(Me, New WS_find_accoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_update_account", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_update_account(ByVal numero As String, ByVal dni As String, ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_update_account", New Object() {numero, dni, id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_update_accountAsync(ByVal numero As String, ByVal dni As String, ByVal id As Integer)
            Me.WS_update_accountAsync(numero, dni, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_update_accountAsync(ByVal numero As String, ByVal dni As String, ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_update_accountOperationCompleted Is Nothing) Then
                Me.WS_update_accountOperationCompleted = AddressOf Me.OnWS_update_accountOperationCompleted
            End If
            Me.InvokeAsync("WS_update_account", New Object() {numero, dni, id}, Me.WS_update_accountOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_update_accountOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_update_accountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_update_accountCompleted(Me, New WS_update_accountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_delete_account", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_delete_account(ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_delete_account", New Object() {id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_delete_accountAsync(ByVal id As Integer)
            Me.WS_delete_accountAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_delete_accountAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_delete_accountOperationCompleted Is Nothing) Then
                Me.WS_delete_accountOperationCompleted = AddressOf Me.OnWS_delete_accountOperationCompleted
            End If
            Me.InvokeAsync("WS_delete_account", New Object() {id}, Me.WS_delete_accountOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_delete_accountOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_delete_accountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_delete_accountCompleted(Me, New WS_delete_accountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_get_all_charges", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_get_all_charges() As Datos
            Dim results() As Object = Me.Invoke("WS_get_all_charges", New Object(-1) {})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_chargesAsync()
            Me.WS_get_all_chargesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_chargesAsync(ByVal userState As Object)
            If (Me.WS_get_all_chargesOperationCompleted Is Nothing) Then
                Me.WS_get_all_chargesOperationCompleted = AddressOf Me.OnWS_get_all_chargesOperationCompleted
            End If
            Me.InvokeAsync("WS_get_all_charges", New Object(-1) {}, Me.WS_get_all_chargesOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_get_all_chargesOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_get_all_chargesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_get_all_chargesCompleted(Me, New WS_get_all_chargesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_create_charge", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_create_charge(ByVal total As Double, ByVal dni As String, ByVal matricula As String, ByVal cuenta As String, ByVal fecha As String) As String
            Dim results() As Object = Me.Invoke("WS_create_charge", New Object() {total, dni, matricula, cuenta, fecha})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_create_chargeAsync(ByVal total As Double, ByVal dni As String, ByVal matricula As String, ByVal cuenta As String, ByVal fecha As String)
            Me.WS_create_chargeAsync(total, dni, matricula, cuenta, fecha, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_create_chargeAsync(ByVal total As Double, ByVal dni As String, ByVal matricula As String, ByVal cuenta As String, ByVal fecha As String, ByVal userState As Object)
            If (Me.WS_create_chargeOperationCompleted Is Nothing) Then
                Me.WS_create_chargeOperationCompleted = AddressOf Me.OnWS_create_chargeOperationCompleted
            End If
            Me.InvokeAsync("WS_create_charge", New Object() {total, dni, matricula, cuenta, fecha}, Me.WS_create_chargeOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_create_chargeOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_create_chargeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_create_chargeCompleted(Me, New WS_create_chargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Ws_update_charge", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Ws_update_charge(ByVal total As Double, ByVal dni As String, ByVal matricula As String, ByVal cuenta As String, ByVal fecha As String, ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("Ws_update_charge", New Object() {total, dni, matricula, cuenta, fecha, id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Ws_update_chargeAsync(ByVal total As Double, ByVal dni As String, ByVal matricula As String, ByVal cuenta As String, ByVal fecha As String, ByVal id As Integer)
            Me.Ws_update_chargeAsync(total, dni, matricula, cuenta, fecha, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Ws_update_chargeAsync(ByVal total As Double, ByVal dni As String, ByVal matricula As String, ByVal cuenta As String, ByVal fecha As String, ByVal id As Integer, ByVal userState As Object)
            If (Me.Ws_update_chargeOperationCompleted Is Nothing) Then
                Me.Ws_update_chargeOperationCompleted = AddressOf Me.OnWs_update_chargeOperationCompleted
            End If
            Me.InvokeAsync("Ws_update_charge", New Object() {total, dni, matricula, cuenta, fecha, id}, Me.Ws_update_chargeOperationCompleted, userState)
        End Sub
        
        Private Sub OnWs_update_chargeOperationCompleted(ByVal arg As Object)
            If (Not (Me.Ws_update_chargeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Ws_update_chargeCompleted(Me, New Ws_update_chargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_find_charge", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_find_charge(ByVal id As Integer) As Datos
            Dim results() As Object = Me.Invoke("WS_find_charge", New Object() {id})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_find_chargeAsync(ByVal id As Integer)
            Me.WS_find_chargeAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_find_chargeAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_find_chargeOperationCompleted Is Nothing) Then
                Me.WS_find_chargeOperationCompleted = AddressOf Me.OnWS_find_chargeOperationCompleted
            End If
            Me.InvokeAsync("WS_find_charge", New Object() {id}, Me.WS_find_chargeOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_find_chargeOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_find_chargeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_find_chargeCompleted(Me, New WS_find_chargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_delete_charge", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_delete_charge(ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_delete_charge", New Object() {id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_delete_chargeAsync(ByVal id As Integer)
            Me.WS_delete_chargeAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_delete_chargeAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_delete_chargeOperationCompleted Is Nothing) Then
                Me.WS_delete_chargeOperationCompleted = AddressOf Me.OnWS_delete_chargeOperationCompleted
            End If
            Me.InvokeAsync("WS_delete_charge", New Object() {id}, Me.WS_delete_chargeOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_delete_chargeOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_delete_chargeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_delete_chargeCompleted(Me, New WS_delete_chargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_get_all_menus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_get_all_menus() As Datos
            Dim results() As Object = Me.Invoke("WS_get_all_menus", New Object(-1) {})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_menusAsync()
            Me.WS_get_all_menusAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_menusAsync(ByVal userState As Object)
            If (Me.WS_get_all_menusOperationCompleted Is Nothing) Then
                Me.WS_get_all_menusOperationCompleted = AddressOf Me.OnWS_get_all_menusOperationCompleted
            End If
            Me.InvokeAsync("WS_get_all_menus", New Object(-1) {}, Me.WS_get_all_menusOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_get_all_menusOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_get_all_menusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_get_all_menusCompleted(Me, New WS_get_all_menusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_create_menu", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_create_menu(ByVal nombre As String, ByVal precio As Double) As Boolean
            Dim results() As Object = Me.Invoke("WS_create_menu", New Object() {nombre, precio})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_create_menuAsync(ByVal nombre As String, ByVal precio As Double)
            Me.WS_create_menuAsync(nombre, precio, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_create_menuAsync(ByVal nombre As String, ByVal precio As Double, ByVal userState As Object)
            If (Me.WS_create_menuOperationCompleted Is Nothing) Then
                Me.WS_create_menuOperationCompleted = AddressOf Me.OnWS_create_menuOperationCompleted
            End If
            Me.InvokeAsync("WS_create_menu", New Object() {nombre, precio}, Me.WS_create_menuOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_create_menuOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_create_menuCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_create_menuCompleted(Me, New WS_create_menuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_find_menu", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_find_menu(ByVal id As Integer) As Datos
            Dim results() As Object = Me.Invoke("WS_find_menu", New Object() {id})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_find_menuAsync(ByVal id As Integer)
            Me.WS_find_menuAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_find_menuAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_find_menuOperationCompleted Is Nothing) Then
                Me.WS_find_menuOperationCompleted = AddressOf Me.OnWS_find_menuOperationCompleted
            End If
            Me.InvokeAsync("WS_find_menu", New Object() {id}, Me.WS_find_menuOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_find_menuOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_find_menuCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_find_menuCompleted(Me, New WS_find_menuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_update_menu", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_update_menu(ByVal nombre As String, ByVal precio As Double, ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_update_menu", New Object() {nombre, precio, id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_update_menuAsync(ByVal nombre As String, ByVal precio As Double, ByVal id As Integer)
            Me.WS_update_menuAsync(nombre, precio, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_update_menuAsync(ByVal nombre As String, ByVal precio As Double, ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_update_menuOperationCompleted Is Nothing) Then
                Me.WS_update_menuOperationCompleted = AddressOf Me.OnWS_update_menuOperationCompleted
            End If
            Me.InvokeAsync("WS_update_menu", New Object() {nombre, precio, id}, Me.WS_update_menuOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_update_menuOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_update_menuCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_update_menuCompleted(Me, New WS_update_menuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_delete_menu", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_delete_menu(ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_delete_menu", New Object() {id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_delete_menuAsync(ByVal id As Integer)
            Me.WS_delete_menuAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_delete_menuAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_delete_menuOperationCompleted Is Nothing) Then
                Me.WS_delete_menuOperationCompleted = AddressOf Me.OnWS_delete_menuOperationCompleted
            End If
            Me.InvokeAsync("WS_delete_menu", New Object() {id}, Me.WS_delete_menuOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_delete_menuOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_delete_menuCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_delete_menuCompleted(Me, New WS_delete_menuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_get_all_saucers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_get_all_saucers() As Datos
            Dim results() As Object = Me.Invoke("WS_get_all_saucers", New Object(-1) {})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_saucersAsync()
            Me.WS_get_all_saucersAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_saucersAsync(ByVal userState As Object)
            If (Me.WS_get_all_saucersOperationCompleted Is Nothing) Then
                Me.WS_get_all_saucersOperationCompleted = AddressOf Me.OnWS_get_all_saucersOperationCompleted
            End If
            Me.InvokeAsync("WS_get_all_saucers", New Object(-1) {}, Me.WS_get_all_saucersOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_get_all_saucersOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_get_all_saucersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_get_all_saucersCompleted(Me, New WS_get_all_saucersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_create_saucer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_create_saucer(ByVal nombre As String, ByVal menu_id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_create_saucer", New Object() {nombre, menu_id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_create_saucerAsync(ByVal nombre As String, ByVal menu_id As Integer)
            Me.WS_create_saucerAsync(nombre, menu_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_create_saucerAsync(ByVal nombre As String, ByVal menu_id As Integer, ByVal userState As Object)
            If (Me.WS_create_saucerOperationCompleted Is Nothing) Then
                Me.WS_create_saucerOperationCompleted = AddressOf Me.OnWS_create_saucerOperationCompleted
            End If
            Me.InvokeAsync("WS_create_saucer", New Object() {nombre, menu_id}, Me.WS_create_saucerOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_create_saucerOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_create_saucerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_create_saucerCompleted(Me, New WS_create_saucerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_find_saucer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_find_saucer(ByVal id As Integer) As Datos
            Dim results() As Object = Me.Invoke("WS_find_saucer", New Object() {id})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_find_saucerAsync(ByVal id As Integer)
            Me.WS_find_saucerAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_find_saucerAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_find_saucerOperationCompleted Is Nothing) Then
                Me.WS_find_saucerOperationCompleted = AddressOf Me.OnWS_find_saucerOperationCompleted
            End If
            Me.InvokeAsync("WS_find_saucer", New Object() {id}, Me.WS_find_saucerOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_find_saucerOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_find_saucerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_find_saucerCompleted(Me, New WS_find_saucerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_update_saucer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_update_saucer(ByVal nombre As String, ByVal menu_id As Integer, ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_update_saucer", New Object() {nombre, menu_id, id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_update_saucerAsync(ByVal nombre As String, ByVal menu_id As Integer, ByVal id As Integer)
            Me.WS_update_saucerAsync(nombre, menu_id, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_update_saucerAsync(ByVal nombre As String, ByVal menu_id As Integer, ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_update_saucerOperationCompleted Is Nothing) Then
                Me.WS_update_saucerOperationCompleted = AddressOf Me.OnWS_update_saucerOperationCompleted
            End If
            Me.InvokeAsync("WS_update_saucer", New Object() {nombre, menu_id, id}, Me.WS_update_saucerOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_update_saucerOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_update_saucerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_update_saucerCompleted(Me, New WS_update_saucerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_delete_saucer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_delete_saucer(ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_delete_saucer", New Object() {id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_delete_saucerAsync(ByVal id As Integer)
            Me.WS_delete_saucerAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_delete_saucerAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_delete_saucerOperationCompleted Is Nothing) Then
                Me.WS_delete_saucerOperationCompleted = AddressOf Me.OnWS_delete_saucerOperationCompleted
            End If
            Me.InvokeAsync("WS_delete_saucer", New Object() {id}, Me.WS_delete_saucerOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_delete_saucerOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_delete_saucerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_delete_saucerCompleted(Me, New WS_delete_saucerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_get_all_consumptions", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_get_all_consumptions() As Datos
            Dim results() As Object = Me.Invoke("WS_get_all_consumptions", New Object(-1) {})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_consumptionsAsync()
            Me.WS_get_all_consumptionsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_consumptionsAsync(ByVal userState As Object)
            If (Me.WS_get_all_consumptionsOperationCompleted Is Nothing) Then
                Me.WS_get_all_consumptionsOperationCompleted = AddressOf Me.OnWS_get_all_consumptionsOperationCompleted
            End If
            Me.InvokeAsync("WS_get_all_consumptions", New Object(-1) {}, Me.WS_get_all_consumptionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_get_all_consumptionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_get_all_consumptionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_get_all_consumptionsCompleted(Me, New WS_get_all_consumptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_create_consumption", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_create_consumption(ByVal matricula As String, ByVal menu_id As String, ByVal fecha As String) As String
            Dim results() As Object = Me.Invoke("WS_create_consumption", New Object() {matricula, menu_id, fecha})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_create_consumptionAsync(ByVal matricula As String, ByVal menu_id As String, ByVal fecha As String)
            Me.WS_create_consumptionAsync(matricula, menu_id, fecha, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_create_consumptionAsync(ByVal matricula As String, ByVal menu_id As String, ByVal fecha As String, ByVal userState As Object)
            If (Me.WS_create_consumptionOperationCompleted Is Nothing) Then
                Me.WS_create_consumptionOperationCompleted = AddressOf Me.OnWS_create_consumptionOperationCompleted
            End If
            Me.InvokeAsync("WS_create_consumption", New Object() {matricula, menu_id, fecha}, Me.WS_create_consumptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_create_consumptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_create_consumptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_create_consumptionCompleted(Me, New WS_create_consumptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_find_consumption", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_find_consumption(ByVal id As Integer) As Datos
            Dim results() As Object = Me.Invoke("WS_find_consumption", New Object() {id})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_find_consumptionAsync(ByVal id As Integer)
            Me.WS_find_consumptionAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_find_consumptionAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_find_consumptionOperationCompleted Is Nothing) Then
                Me.WS_find_consumptionOperationCompleted = AddressOf Me.OnWS_find_consumptionOperationCompleted
            End If
            Me.InvokeAsync("WS_find_consumption", New Object() {id}, Me.WS_find_consumptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_find_consumptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_find_consumptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_find_consumptionCompleted(Me, New WS_find_consumptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_update_consumption", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_update_consumption(ByVal matricula As String, ByVal menu_id As String, ByVal fecha As String, ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_update_consumption", New Object() {matricula, menu_id, fecha, id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_update_consumptionAsync(ByVal matricula As String, ByVal menu_id As String, ByVal fecha As String, ByVal id As Integer)
            Me.WS_update_consumptionAsync(matricula, menu_id, fecha, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_update_consumptionAsync(ByVal matricula As String, ByVal menu_id As String, ByVal fecha As String, ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_update_consumptionOperationCompleted Is Nothing) Then
                Me.WS_update_consumptionOperationCompleted = AddressOf Me.OnWS_update_consumptionOperationCompleted
            End If
            Me.InvokeAsync("WS_update_consumption", New Object() {matricula, menu_id, fecha, id}, Me.WS_update_consumptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_update_consumptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_update_consumptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_update_consumptionCompleted(Me, New WS_update_consumptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_delete_consumption", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_delete_consumption(ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_delete_consumption", New Object() {id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_delete_consumptionAsync(ByVal id As Integer)
            Me.WS_delete_consumptionAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_delete_consumptionAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_delete_consumptionOperationCompleted Is Nothing) Then
                Me.WS_delete_consumptionOperationCompleted = AddressOf Me.OnWS_delete_consumptionOperationCompleted
            End If
            Me.InvokeAsync("WS_delete_consumption", New Object() {id}, Me.WS_delete_consumptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_delete_consumptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_delete_consumptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_delete_consumptionCompleted(Me, New WS_delete_consumptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_get_all_ingredients", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_get_all_ingredients() As Datos
            Dim results() As Object = Me.Invoke("WS_get_all_ingredients", New Object(-1) {})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_ingredientsAsync()
            Me.WS_get_all_ingredientsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_ingredientsAsync(ByVal userState As Object)
            If (Me.WS_get_all_ingredientsOperationCompleted Is Nothing) Then
                Me.WS_get_all_ingredientsOperationCompleted = AddressOf Me.OnWS_get_all_ingredientsOperationCompleted
            End If
            Me.InvokeAsync("WS_get_all_ingredients", New Object(-1) {}, Me.WS_get_all_ingredientsOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_get_all_ingredientsOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_get_all_ingredientsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_get_all_ingredientsCompleted(Me, New WS_get_all_ingredientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_create_ingredient", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_create_ingredient(ByVal nombre As String) As String
            Dim results() As Object = Me.Invoke("WS_create_ingredient", New Object() {nombre})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_create_ingredientAsync(ByVal nombre As String)
            Me.WS_create_ingredientAsync(nombre, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_create_ingredientAsync(ByVal nombre As String, ByVal userState As Object)
            If (Me.WS_create_ingredientOperationCompleted Is Nothing) Then
                Me.WS_create_ingredientOperationCompleted = AddressOf Me.OnWS_create_ingredientOperationCompleted
            End If
            Me.InvokeAsync("WS_create_ingredient", New Object() {nombre}, Me.WS_create_ingredientOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_create_ingredientOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_create_ingredientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_create_ingredientCompleted(Me, New WS_create_ingredientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_find_ingredient", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_find_ingredient(ByVal id As Integer) As Datos
            Dim results() As Object = Me.Invoke("WS_find_ingredient", New Object() {id})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_find_ingredientAsync(ByVal id As Integer)
            Me.WS_find_ingredientAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_find_ingredientAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_find_ingredientOperationCompleted Is Nothing) Then
                Me.WS_find_ingredientOperationCompleted = AddressOf Me.OnWS_find_ingredientOperationCompleted
            End If
            Me.InvokeAsync("WS_find_ingredient", New Object() {id}, Me.WS_find_ingredientOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_find_ingredientOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_find_ingredientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_find_ingredientCompleted(Me, New WS_find_ingredientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_update_ingredient", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_update_ingredient(ByVal nombre As String, ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_update_ingredient", New Object() {nombre, id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_update_ingredientAsync(ByVal nombre As String, ByVal id As Integer)
            Me.WS_update_ingredientAsync(nombre, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_update_ingredientAsync(ByVal nombre As String, ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_update_ingredientOperationCompleted Is Nothing) Then
                Me.WS_update_ingredientOperationCompleted = AddressOf Me.OnWS_update_ingredientOperationCompleted
            End If
            Me.InvokeAsync("WS_update_ingredient", New Object() {nombre, id}, Me.WS_update_ingredientOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_update_ingredientOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_update_ingredientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_update_ingredientCompleted(Me, New WS_update_ingredientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_delete_ingredient", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_delete_ingredient(ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_delete_ingredient", New Object() {id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_delete_ingredientAsync(ByVal id As Integer)
            Me.WS_delete_ingredientAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_delete_ingredientAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_delete_ingredientOperationCompleted Is Nothing) Then
                Me.WS_delete_ingredientOperationCompleted = AddressOf Me.OnWS_delete_ingredientOperationCompleted
            End If
            Me.InvokeAsync("WS_delete_ingredient", New Object() {id}, Me.WS_delete_ingredientOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_delete_ingredientOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_delete_ingredientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_delete_ingredientCompleted(Me, New WS_delete_ingredientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_get_all_ingredients_saucers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_get_all_ingredients_saucers() As Datos
            Dim results() As Object = Me.Invoke("WS_get_all_ingredients_saucers", New Object(-1) {})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_ingredients_saucersAsync()
            Me.WS_get_all_ingredients_saucersAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_ingredients_saucersAsync(ByVal userState As Object)
            If (Me.WS_get_all_ingredients_saucersOperationCompleted Is Nothing) Then
                Me.WS_get_all_ingredients_saucersOperationCompleted = AddressOf Me.OnWS_get_all_ingredients_saucersOperationCompleted
            End If
            Me.InvokeAsync("WS_get_all_ingredients_saucers", New Object(-1) {}, Me.WS_get_all_ingredients_saucersOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_get_all_ingredients_saucersOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_get_all_ingredients_saucersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_get_all_ingredients_saucersCompleted(Me, New WS_get_all_ingredients_saucersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_create_ingredient_saucer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_create_ingredient_saucer(ByVal plato_id As Integer, ByVal ingrediente As Integer) As String
            Dim results() As Object = Me.Invoke("WS_create_ingredient_saucer", New Object() {plato_id, ingrediente})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_create_ingredient_saucerAsync(ByVal plato_id As Integer, ByVal ingrediente As Integer)
            Me.WS_create_ingredient_saucerAsync(plato_id, ingrediente, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_create_ingredient_saucerAsync(ByVal plato_id As Integer, ByVal ingrediente As Integer, ByVal userState As Object)
            If (Me.WS_create_ingredient_saucerOperationCompleted Is Nothing) Then
                Me.WS_create_ingredient_saucerOperationCompleted = AddressOf Me.OnWS_create_ingredient_saucerOperationCompleted
            End If
            Me.InvokeAsync("WS_create_ingredient_saucer", New Object() {plato_id, ingrediente}, Me.WS_create_ingredient_saucerOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_create_ingredient_saucerOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_create_ingredient_saucerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_create_ingredient_saucerCompleted(Me, New WS_create_ingredient_saucerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_find_ingredient_saucer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_find_ingredient_saucer(ByVal id As Integer) As Datos
            Dim results() As Object = Me.Invoke("WS_find_ingredient_saucer", New Object() {id})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_find_ingredient_saucerAsync(ByVal id As Integer)
            Me.WS_find_ingredient_saucerAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_find_ingredient_saucerAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_find_ingredient_saucerOperationCompleted Is Nothing) Then
                Me.WS_find_ingredient_saucerOperationCompleted = AddressOf Me.OnWS_find_ingredient_saucerOperationCompleted
            End If
            Me.InvokeAsync("WS_find_ingredient_saucer", New Object() {id}, Me.WS_find_ingredient_saucerOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_find_ingredient_saucerOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_find_ingredient_saucerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_find_ingredient_saucerCompleted(Me, New WS_find_ingredient_saucerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_update_ingredient_saucer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_update_ingredient_saucer(ByVal plato_id As Integer, ByVal ingrediente As Integer, ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_update_ingredient_saucer", New Object() {plato_id, ingrediente, id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_update_ingredient_saucerAsync(ByVal plato_id As Integer, ByVal ingrediente As Integer, ByVal id As Integer)
            Me.WS_update_ingredient_saucerAsync(plato_id, ingrediente, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_update_ingredient_saucerAsync(ByVal plato_id As Integer, ByVal ingrediente As Integer, ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_update_ingredient_saucerOperationCompleted Is Nothing) Then
                Me.WS_update_ingredient_saucerOperationCompleted = AddressOf Me.OnWS_update_ingredient_saucerOperationCompleted
            End If
            Me.InvokeAsync("WS_update_ingredient_saucer", New Object() {plato_id, ingrediente, id}, Me.WS_update_ingredient_saucerOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_update_ingredient_saucerOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_update_ingredient_saucerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_update_ingredient_saucerCompleted(Me, New WS_update_ingredient_saucerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_delete_ingredient_saucer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_delete_ingredient_saucer(ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_delete_ingredient_saucer", New Object() {id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_delete_ingredient_saucerAsync(ByVal id As Integer)
            Me.WS_delete_ingredient_saucerAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_delete_ingredient_saucerAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_delete_ingredient_saucerOperationCompleted Is Nothing) Then
                Me.WS_delete_ingredient_saucerOperationCompleted = AddressOf Me.OnWS_delete_ingredient_saucerOperationCompleted
            End If
            Me.InvokeAsync("WS_delete_ingredient_saucer", New Object() {id}, Me.WS_delete_ingredient_saucerOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_delete_ingredient_saucerOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_delete_ingredient_saucerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_delete_ingredient_saucerCompleted(Me, New WS_delete_ingredient_saucerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_get_all_allergies", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_get_all_allergies() As Datos
            Dim results() As Object = Me.Invoke("WS_get_all_allergies", New Object(-1) {})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_allergiesAsync()
            Me.WS_get_all_allergiesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_get_all_allergiesAsync(ByVal userState As Object)
            If (Me.WS_get_all_allergiesOperationCompleted Is Nothing) Then
                Me.WS_get_all_allergiesOperationCompleted = AddressOf Me.OnWS_get_all_allergiesOperationCompleted
            End If
            Me.InvokeAsync("WS_get_all_allergies", New Object(-1) {}, Me.WS_get_all_allergiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_get_all_allergiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_get_all_allergiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_get_all_allergiesCompleted(Me, New WS_get_all_allergiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_create_alergy", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_create_alergy(ByVal matricula As String, ByVal ingrediente As Integer) As String
            Dim results() As Object = Me.Invoke("WS_create_alergy", New Object() {matricula, ingrediente})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_create_alergyAsync(ByVal matricula As String, ByVal ingrediente As Integer)
            Me.WS_create_alergyAsync(matricula, ingrediente, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_create_alergyAsync(ByVal matricula As String, ByVal ingrediente As Integer, ByVal userState As Object)
            If (Me.WS_create_alergyOperationCompleted Is Nothing) Then
                Me.WS_create_alergyOperationCompleted = AddressOf Me.OnWS_create_alergyOperationCompleted
            End If
            Me.InvokeAsync("WS_create_alergy", New Object() {matricula, ingrediente}, Me.WS_create_alergyOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_create_alergyOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_create_alergyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_create_alergyCompleted(Me, New WS_create_alergyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_find_allergy", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_find_allergy(ByVal id As Integer) As Datos
            Dim results() As Object = Me.Invoke("WS_find_allergy", New Object() {id})
            Return CType(results(0),Datos)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_find_allergyAsync(ByVal id As Integer)
            Me.WS_find_allergyAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_find_allergyAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_find_allergyOperationCompleted Is Nothing) Then
                Me.WS_find_allergyOperationCompleted = AddressOf Me.OnWS_find_allergyOperationCompleted
            End If
            Me.InvokeAsync("WS_find_allergy", New Object() {id}, Me.WS_find_allergyOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_find_allergyOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_find_allergyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_find_allergyCompleted(Me, New WS_find_allergyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_update_alergy", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_update_alergy(ByVal matricula As String, ByVal ingrediente As Integer, ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_update_alergy", New Object() {matricula, ingrediente, id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_update_alergyAsync(ByVal matricula As String, ByVal ingrediente As Integer, ByVal id As Integer)
            Me.WS_update_alergyAsync(matricula, ingrediente, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_update_alergyAsync(ByVal matricula As String, ByVal ingrediente As Integer, ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_update_alergyOperationCompleted Is Nothing) Then
                Me.WS_update_alergyOperationCompleted = AddressOf Me.OnWS_update_alergyOperationCompleted
            End If
            Me.InvokeAsync("WS_update_alergy", New Object() {matricula, ingrediente, id}, Me.WS_update_alergyOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_update_alergyOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_update_alergyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_update_alergyCompleted(Me, New WS_update_alergyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WS_delete_alergy", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_delete_alergy(ByVal id As Integer) As String
            Dim results() As Object = Me.Invoke("WS_delete_alergy", New Object() {id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_delete_alergyAsync(ByVal id As Integer)
            Me.WS_delete_alergyAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_delete_alergyAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.WS_delete_alergyOperationCompleted Is Nothing) Then
                Me.WS_delete_alergyOperationCompleted = AddressOf Me.OnWS_delete_alergyOperationCompleted
            End If
            Me.InvokeAsync("WS_delete_alergy", New Object() {id}, Me.WS_delete_alergyOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_delete_alergyOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_delete_alergyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_delete_alergyCompleted(Me, New WS_delete_alergyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("Datos"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet"),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")>  _
    Partial Public Class Datos
        Inherits Global.System.Data.DataSet
        
        Private tableestudiante As estudianteDataTable
        
        Private tabletutor As tutorDataTable
        
        Private tabletelefono As telefonoDataTable
        
        Private tablecuenta As cuentaDataTable
        
        Private tablemenu As menuDataTable
        
        Private tableplato As platoDataTable
        
        Private tableingrediente As ingredienteDataTable
        
        Private tableconsumo_menu_estudiante As consumo_menu_estudianteDataTable
        
        Private tableingrediente_alergico_estudiante As ingrediente_alergico_estudianteDataTable
        
        Private tablecargo As cargoDataTable
        
        Private tableingrediente_plato As ingrediente_platoDataTable
        
        Private relationFK__tutor__estudiant__1273C1CD As Global.System.Data.DataRelation
        
        Private relationFK__telefono__tutor___15502E78 As Global.System.Data.DataRelation
        
        Private relationFK__cuenta__tutor_dn__182C9B23 As Global.System.Data.DataRelation
        
        Private relationFK__plato__menu_id__21B6055D As Global.System.Data.DataRelation
        
        Private relationFK__consumo_m__estud__267ABA7A As Global.System.Data.DataRelation
        
        Private relationFK__consumo_m__menu___276EDEB3 As Global.System.Data.DataRelation
        
        Private relationFK__ingredien__ingre__2B3F6F97 As Global.System.Data.DataRelation
        
        Private relationFK__ingredien__ingre__2F10007B As Global.System.Data.DataRelation
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("estudiante")) Is Nothing) Then
                    MyBase.Tables.Add(New estudianteDataTable(ds.Tables("estudiante")))
                End If
                If (Not (ds.Tables("tutor")) Is Nothing) Then
                    MyBase.Tables.Add(New tutorDataTable(ds.Tables("tutor")))
                End If
                If (Not (ds.Tables("telefono")) Is Nothing) Then
                    MyBase.Tables.Add(New telefonoDataTable(ds.Tables("telefono")))
                End If
                If (Not (ds.Tables("cuenta")) Is Nothing) Then
                    MyBase.Tables.Add(New cuentaDataTable(ds.Tables("cuenta")))
                End If
                If (Not (ds.Tables("menu")) Is Nothing) Then
                    MyBase.Tables.Add(New menuDataTable(ds.Tables("menu")))
                End If
                If (Not (ds.Tables("plato")) Is Nothing) Then
                    MyBase.Tables.Add(New platoDataTable(ds.Tables("plato")))
                End If
                If (Not (ds.Tables("ingrediente")) Is Nothing) Then
                    MyBase.Tables.Add(New ingredienteDataTable(ds.Tables("ingrediente")))
                End If
                If (Not (ds.Tables("consumo_menu_estudiante")) Is Nothing) Then
                    MyBase.Tables.Add(New consumo_menu_estudianteDataTable(ds.Tables("consumo_menu_estudiante")))
                End If
                If (Not (ds.Tables("ingrediente_alergico_estudiante")) Is Nothing) Then
                    MyBase.Tables.Add(New ingrediente_alergico_estudianteDataTable(ds.Tables("ingrediente_alergico_estudiante")))
                End If
                If (Not (ds.Tables("cargo")) Is Nothing) Then
                    MyBase.Tables.Add(New cargoDataTable(ds.Tables("cargo")))
                End If
                If (Not (ds.Tables("ingrediente_plato")) Is Nothing) Then
                    MyBase.Tables.Add(New ingrediente_platoDataTable(ds.Tables("ingrediente_plato")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property estudiante() As estudianteDataTable
            Get
                Return Me.tableestudiante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property tutor() As tutorDataTable
            Get
                Return Me.tabletutor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property telefono() As telefonoDataTable
            Get
                Return Me.tabletelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property cuenta() As cuentaDataTable
            Get
                Return Me.tablecuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property menu() As menuDataTable
            Get
                Return Me.tablemenu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property plato() As platoDataTable
            Get
                Return Me.tableplato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property ingrediente() As ingredienteDataTable
            Get
                Return Me.tableingrediente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property consumo_menu_estudiante() As consumo_menu_estudianteDataTable
            Get
                Return Me.tableconsumo_menu_estudiante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property ingrediente_alergico_estudiante() As ingrediente_alergico_estudianteDataTable
            Get
                Return Me.tableingrediente_alergico_estudiante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property cargo() As cargoDataTable
            Get
                Return Me.tablecargo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property ingrediente_plato() As ingrediente_platoDataTable
            Get
                Return Me.tableingrediente_plato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.BrowsableAttribute(true),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As Datos = CType(MyBase.Clone,Datos)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If (Not (ds.Tables("estudiante")) Is Nothing) Then
                    MyBase.Tables.Add(New estudianteDataTable(ds.Tables("estudiante")))
                End If
                If (Not (ds.Tables("tutor")) Is Nothing) Then
                    MyBase.Tables.Add(New tutorDataTable(ds.Tables("tutor")))
                End If
                If (Not (ds.Tables("telefono")) Is Nothing) Then
                    MyBase.Tables.Add(New telefonoDataTable(ds.Tables("telefono")))
                End If
                If (Not (ds.Tables("cuenta")) Is Nothing) Then
                    MyBase.Tables.Add(New cuentaDataTable(ds.Tables("cuenta")))
                End If
                If (Not (ds.Tables("menu")) Is Nothing) Then
                    MyBase.Tables.Add(New menuDataTable(ds.Tables("menu")))
                End If
                If (Not (ds.Tables("plato")) Is Nothing) Then
                    MyBase.Tables.Add(New platoDataTable(ds.Tables("plato")))
                End If
                If (Not (ds.Tables("ingrediente")) Is Nothing) Then
                    MyBase.Tables.Add(New ingredienteDataTable(ds.Tables("ingrediente")))
                End If
                If (Not (ds.Tables("consumo_menu_estudiante")) Is Nothing) Then
                    MyBase.Tables.Add(New consumo_menu_estudianteDataTable(ds.Tables("consumo_menu_estudiante")))
                End If
                If (Not (ds.Tables("ingrediente_alergico_estudiante")) Is Nothing) Then
                    MyBase.Tables.Add(New ingrediente_alergico_estudianteDataTable(ds.Tables("ingrediente_alergico_estudiante")))
                End If
                If (Not (ds.Tables("cargo")) Is Nothing) Then
                    MyBase.Tables.Add(New cargoDataTable(ds.Tables("cargo")))
                End If
                If (Not (ds.Tables("ingrediente_plato")) Is Nothing) Then
                    MyBase.Tables.Add(New ingrediente_platoDataTable(ds.Tables("ingrediente_plato")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableestudiante = CType(MyBase.Tables("estudiante"),estudianteDataTable)
            If (initTable = true) Then
                If (Not (Me.tableestudiante) Is Nothing) Then
                    Me.tableestudiante.InitVars
                End If
            End If
            Me.tabletutor = CType(MyBase.Tables("tutor"),tutorDataTable)
            If (initTable = true) Then
                If (Not (Me.tabletutor) Is Nothing) Then
                    Me.tabletutor.InitVars
                End If
            End If
            Me.tabletelefono = CType(MyBase.Tables("telefono"),telefonoDataTable)
            If (initTable = true) Then
                If (Not (Me.tabletelefono) Is Nothing) Then
                    Me.tabletelefono.InitVars
                End If
            End If
            Me.tablecuenta = CType(MyBase.Tables("cuenta"),cuentaDataTable)
            If (initTable = true) Then
                If (Not (Me.tablecuenta) Is Nothing) Then
                    Me.tablecuenta.InitVars
                End If
            End If
            Me.tablemenu = CType(MyBase.Tables("menu"),menuDataTable)
            If (initTable = true) Then
                If (Not (Me.tablemenu) Is Nothing) Then
                    Me.tablemenu.InitVars
                End If
            End If
            Me.tableplato = CType(MyBase.Tables("plato"),platoDataTable)
            If (initTable = true) Then
                If (Not (Me.tableplato) Is Nothing) Then
                    Me.tableplato.InitVars
                End If
            End If
            Me.tableingrediente = CType(MyBase.Tables("ingrediente"),ingredienteDataTable)
            If (initTable = true) Then
                If (Not (Me.tableingrediente) Is Nothing) Then
                    Me.tableingrediente.InitVars
                End If
            End If
            Me.tableconsumo_menu_estudiante = CType(MyBase.Tables("consumo_menu_estudiante"),consumo_menu_estudianteDataTable)
            If (initTable = true) Then
                If (Not (Me.tableconsumo_menu_estudiante) Is Nothing) Then
                    Me.tableconsumo_menu_estudiante.InitVars
                End If
            End If
            Me.tableingrediente_alergico_estudiante = CType(MyBase.Tables("ingrediente_alergico_estudiante"),ingrediente_alergico_estudianteDataTable)
            If (initTable = true) Then
                If (Not (Me.tableingrediente_alergico_estudiante) Is Nothing) Then
                    Me.tableingrediente_alergico_estudiante.InitVars
                End If
            End If
            Me.tablecargo = CType(MyBase.Tables("cargo"),cargoDataTable)
            If (initTable = true) Then
                If (Not (Me.tablecargo) Is Nothing) Then
                    Me.tablecargo.InitVars
                End If
            End If
            Me.tableingrediente_plato = CType(MyBase.Tables("ingrediente_plato"),ingrediente_platoDataTable)
            If (initTable = true) Then
                If (Not (Me.tableingrediente_plato) Is Nothing) Then
                    Me.tableingrediente_plato.InitVars
                End If
            End If
            Me.relationFK__tutor__estudiant__1273C1CD = Me.Relations("FK__tutor__estudiant__1273C1CD")
            Me.relationFK__telefono__tutor___15502E78 = Me.Relations("FK__telefono__tutor___15502E78")
            Me.relationFK__cuenta__tutor_dn__182C9B23 = Me.Relations("FK__cuenta__tutor_dn__182C9B23")
            Me.relationFK__plato__menu_id__21B6055D = Me.Relations("FK__plato__menu_id__21B6055D")
            Me.relationFK__consumo_m__estud__267ABA7A = Me.Relations("FK__consumo_m__estud__267ABA7A")
            Me.relationFK__consumo_m__menu___276EDEB3 = Me.Relations("FK__consumo_m__menu___276EDEB3")
            Me.relationFK__ingredien__ingre__2B3F6F97 = Me.Relations("FK__ingredien__ingre__2B3F6F97")
            Me.relationFK__ingredien__ingre__2F10007B = Me.Relations("FK__ingredien__ingre__2F10007B")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.DataSetName = "Datos"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/Datos.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableestudiante = New estudianteDataTable()
            MyBase.Tables.Add(Me.tableestudiante)
            Me.tabletutor = New tutorDataTable()
            MyBase.Tables.Add(Me.tabletutor)
            Me.tabletelefono = New telefonoDataTable()
            MyBase.Tables.Add(Me.tabletelefono)
            Me.tablecuenta = New cuentaDataTable()
            MyBase.Tables.Add(Me.tablecuenta)
            Me.tablemenu = New menuDataTable()
            MyBase.Tables.Add(Me.tablemenu)
            Me.tableplato = New platoDataTable()
            MyBase.Tables.Add(Me.tableplato)
            Me.tableingrediente = New ingredienteDataTable()
            MyBase.Tables.Add(Me.tableingrediente)
            Me.tableconsumo_menu_estudiante = New consumo_menu_estudianteDataTable()
            MyBase.Tables.Add(Me.tableconsumo_menu_estudiante)
            Me.tableingrediente_alergico_estudiante = New ingrediente_alergico_estudianteDataTable()
            MyBase.Tables.Add(Me.tableingrediente_alergico_estudiante)
            Me.tablecargo = New cargoDataTable()
            MyBase.Tables.Add(Me.tablecargo)
            Me.tableingrediente_plato = New ingrediente_platoDataTable()
            MyBase.Tables.Add(Me.tableingrediente_plato)
            Me.relationFK__tutor__estudiant__1273C1CD = New Global.System.Data.DataRelation("FK__tutor__estudiant__1273C1CD", New Global.System.Data.DataColumn() {Me.tableestudiante.matriculaColumn}, New Global.System.Data.DataColumn() {Me.tabletutor.estudiante_matriculaColumn}, false)
            Me.Relations.Add(Me.relationFK__tutor__estudiant__1273C1CD)
            Me.relationFK__telefono__tutor___15502E78 = New Global.System.Data.DataRelation("FK__telefono__tutor___15502E78", New Global.System.Data.DataColumn() {Me.tabletutor.dniColumn}, New Global.System.Data.DataColumn() {Me.tabletelefono.tutor_dniColumn}, false)
            Me.Relations.Add(Me.relationFK__telefono__tutor___15502E78)
            Me.relationFK__cuenta__tutor_dn__182C9B23 = New Global.System.Data.DataRelation("FK__cuenta__tutor_dn__182C9B23", New Global.System.Data.DataColumn() {Me.tabletutor.dniColumn}, New Global.System.Data.DataColumn() {Me.tablecuenta.tutor_dniColumn}, false)
            Me.Relations.Add(Me.relationFK__cuenta__tutor_dn__182C9B23)
            Me.relationFK__plato__menu_id__21B6055D = New Global.System.Data.DataRelation("FK__plato__menu_id__21B6055D", New Global.System.Data.DataColumn() {Me.tablemenu.idColumn}, New Global.System.Data.DataColumn() {Me.tableplato.menu_idColumn}, false)
            Me.Relations.Add(Me.relationFK__plato__menu_id__21B6055D)
            Me.relationFK__consumo_m__estud__267ABA7A = New Global.System.Data.DataRelation("FK__consumo_m__estud__267ABA7A", New Global.System.Data.DataColumn() {Me.tableestudiante.matriculaColumn}, New Global.System.Data.DataColumn() {Me.tableconsumo_menu_estudiante.estudiante_matriculaColumn}, false)
            Me.Relations.Add(Me.relationFK__consumo_m__estud__267ABA7A)
            Me.relationFK__consumo_m__menu___276EDEB3 = New Global.System.Data.DataRelation("FK__consumo_m__menu___276EDEB3", New Global.System.Data.DataColumn() {Me.tablemenu.idColumn}, New Global.System.Data.DataColumn() {Me.tableconsumo_menu_estudiante.menu_idColumn}, false)
            Me.Relations.Add(Me.relationFK__consumo_m__menu___276EDEB3)
            Me.relationFK__ingredien__ingre__2B3F6F97 = New Global.System.Data.DataRelation("FK__ingredien__ingre__2B3F6F97", New Global.System.Data.DataColumn() {Me.tableingrediente.idColumn}, New Global.System.Data.DataColumn() {Me.tableingrediente_alergico_estudiante.ingrediente_idColumn}, false)
            Me.Relations.Add(Me.relationFK__ingredien__ingre__2B3F6F97)
            Me.relationFK__ingredien__ingre__2F10007B = New Global.System.Data.DataRelation("FK__ingredien__ingre__2F10007B", New Global.System.Data.DataColumn() {Me.tableingrediente.idColumn}, New Global.System.Data.DataColumn() {Me.tableingrediente_plato.ingrediente_idColumn}, false)
            Me.Relations.Add(Me.relationFK__ingredien__ingre__2F10007B)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeestudiante() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializetutor() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializetelefono() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializecuenta() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializemenu() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeplato() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeingrediente() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeconsumo_menu_estudiante() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeingrediente_alergico_estudiante() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializecargo() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeingrediente_plato() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As Datos = New Datos()
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub estudianteRowChangeEventHandler(ByVal sender As Object, ByVal e As estudianteRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub tutorRowChangeEventHandler(ByVal sender As Object, ByVal e As tutorRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub telefonoRowChangeEventHandler(ByVal sender As Object, ByVal e As telefonoRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub cuentaRowChangeEventHandler(ByVal sender As Object, ByVal e As cuentaRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub menuRowChangeEventHandler(ByVal sender As Object, ByVal e As menuRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub platoRowChangeEventHandler(ByVal sender As Object, ByVal e As platoRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub ingredienteRowChangeEventHandler(ByVal sender As Object, ByVal e As ingredienteRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub consumo_menu_estudianteRowChangeEventHandler(ByVal sender As Object, ByVal e As consumo_menu_estudianteRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub ingrediente_alergico_estudianteRowChangeEventHandler(ByVal sender As Object, ByVal e As ingrediente_alergico_estudianteRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub cargoRowChangeEventHandler(ByVal sender As Object, ByVal e As cargoRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub ingrediente_platoRowChangeEventHandler(ByVal sender As Object, ByVal e As ingrediente_platoRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class estudianteDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnmatricula As Global.System.Data.DataColumn
            
            Private columnnombre As Global.System.Data.DataColumn
            
            Private columnapellido_paterno As Global.System.Data.DataColumn
            
            Private columnapellido_materno As Global.System.Data.DataColumn
            
            Private columnfecha_ingreso As Global.System.Data.DataColumn
            
            Private columnfecha_baja As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "estudiante"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property matriculaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnmatricula
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnombre
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property apellido_paternoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnapellido_paterno
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property apellido_maternoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnapellido_materno
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property fecha_ingresoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnfecha_ingreso
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property fecha_bajaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnfecha_baja
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As estudianteRow
                Get
                    Return CType(Me.Rows(index),estudianteRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event estudianteRowChanging As estudianteRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event estudianteRowChanged As estudianteRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event estudianteRowDeleting As estudianteRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event estudianteRowDeleted As estudianteRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddestudianteRow(ByVal row As estudianteRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddestudianteRow(ByVal matricula As String, ByVal nombre As String, ByVal apellido_paterno As String, ByVal apellido_materno As String, ByVal fecha_ingreso As Date, ByVal fecha_baja As Date) As estudianteRow
                Dim rowestudianteRow As estudianteRow = CType(Me.NewRow,estudianteRow)
                Dim columnValuesArray() As Object = New Object() {matricula, nombre, apellido_paterno, apellido_materno, fecha_ingreso, fecha_baja}
                rowestudianteRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowestudianteRow)
                Return rowestudianteRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindBymatricula(ByVal matricula As String) As estudianteRow
                Return CType(Me.Rows.Find(New Object() {matricula}),estudianteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As estudianteDataTable = CType(MyBase.Clone,estudianteDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New estudianteDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnmatricula = MyBase.Columns("matricula")
                Me.columnnombre = MyBase.Columns("nombre")
                Me.columnapellido_paterno = MyBase.Columns("apellido_paterno")
                Me.columnapellido_materno = MyBase.Columns("apellido_materno")
                Me.columnfecha_ingreso = MyBase.Columns("fecha_ingreso")
                Me.columnfecha_baja = MyBase.Columns("fecha_baja")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnmatricula = New Global.System.Data.DataColumn("matricula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnmatricula)
                Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnombre)
                Me.columnapellido_paterno = New Global.System.Data.DataColumn("apellido_paterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnapellido_paterno)
                Me.columnapellido_materno = New Global.System.Data.DataColumn("apellido_materno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnapellido_materno)
                Me.columnfecha_ingreso = New Global.System.Data.DataColumn("fecha_ingreso", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnfecha_ingreso)
                Me.columnfecha_baja = New Global.System.Data.DataColumn("fecha_baja", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnfecha_baja)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnmatricula}, true))
                Me.columnmatricula.AllowDBNull = false
                Me.columnmatricula.Unique = true
                Me.columnmatricula.MaxLength = 20
                Me.columnnombre.AllowDBNull = false
                Me.columnnombre.MaxLength = 20
                Me.columnapellido_paterno.MaxLength = 20
                Me.columnapellido_materno.MaxLength = 20
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewestudianteRow() As estudianteRow
                Return CType(Me.NewRow,estudianteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New estudianteRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(estudianteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.estudianteRowChangedEvent) Is Nothing) Then
                    RaiseEvent estudianteRowChanged(Me, New estudianteRowChangeEvent(CType(e.Row,estudianteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.estudianteRowChangingEvent) Is Nothing) Then
                    RaiseEvent estudianteRowChanging(Me, New estudianteRowChangeEvent(CType(e.Row,estudianteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.estudianteRowDeletedEvent) Is Nothing) Then
                    RaiseEvent estudianteRowDeleted(Me, New estudianteRowChangeEvent(CType(e.Row,estudianteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.estudianteRowDeletingEvent) Is Nothing) Then
                    RaiseEvent estudianteRowDeleting(Me, New estudianteRowChangeEvent(CType(e.Row,estudianteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveestudianteRow(ByVal row As estudianteRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As Datos = New Datos()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "estudianteDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class tutorDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columndni As Global.System.Data.DataColumn
            
            Private columnnombre As Global.System.Data.DataColumn
            
            Private columnapellido_paterno As Global.System.Data.DataColumn
            
            Private columnapellido_materno As Global.System.Data.DataColumn
            
            Private columndireccion As Global.System.Data.DataColumn
            
            Private columnparentesco As Global.System.Data.DataColumn
            
            Private columnestudiante_matricula As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "tutor"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property dniColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columndni
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnombre
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property apellido_paternoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnapellido_paterno
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property apellido_maternoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnapellido_materno
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property direccionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columndireccion
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property parentescoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnparentesco
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property estudiante_matriculaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnestudiante_matricula
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As tutorRow
                Get
                    Return CType(Me.Rows(index),tutorRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event tutorRowChanging As tutorRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event tutorRowChanged As tutorRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event tutorRowDeleting As tutorRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event tutorRowDeleted As tutorRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddtutorRow(ByVal row As tutorRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddtutorRow(ByVal dni As String, ByVal nombre As String, ByVal apellido_paterno As String, ByVal apellido_materno As String, ByVal direccion As String, ByVal parentesco As String, ByVal parentestudianteRowByFK__tutor__estudiant__1273C1CD As estudianteRow) As tutorRow
                Dim rowtutorRow As tutorRow = CType(Me.NewRow,tutorRow)
                Dim columnValuesArray() As Object = New Object() {dni, nombre, apellido_paterno, apellido_materno, direccion, parentesco, Nothing}
                If (Not (parentestudianteRowByFK__tutor__estudiant__1273C1CD) Is Nothing) Then
                    columnValuesArray(6) = parentestudianteRowByFK__tutor__estudiant__1273C1CD(0)
                End If
                rowtutorRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowtutorRow)
                Return rowtutorRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindBydni(ByVal dni As String) As tutorRow
                Return CType(Me.Rows.Find(New Object() {dni}),tutorRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As tutorDataTable = CType(MyBase.Clone,tutorDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New tutorDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columndni = MyBase.Columns("dni")
                Me.columnnombre = MyBase.Columns("nombre")
                Me.columnapellido_paterno = MyBase.Columns("apellido_paterno")
                Me.columnapellido_materno = MyBase.Columns("apellido_materno")
                Me.columndireccion = MyBase.Columns("direccion")
                Me.columnparentesco = MyBase.Columns("parentesco")
                Me.columnestudiante_matricula = MyBase.Columns("estudiante_matricula")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columndni = New Global.System.Data.DataColumn("dni", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columndni)
                Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnombre)
                Me.columnapellido_paterno = New Global.System.Data.DataColumn("apellido_paterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnapellido_paterno)
                Me.columnapellido_materno = New Global.System.Data.DataColumn("apellido_materno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnapellido_materno)
                Me.columndireccion = New Global.System.Data.DataColumn("direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columndireccion)
                Me.columnparentesco = New Global.System.Data.DataColumn("parentesco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnparentesco)
                Me.columnestudiante_matricula = New Global.System.Data.DataColumn("estudiante_matricula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnestudiante_matricula)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columndni}, true))
                Me.columndni.AllowDBNull = false
                Me.columndni.Unique = true
                Me.columndni.MaxLength = 20
                Me.columnnombre.AllowDBNull = false
                Me.columnnombre.MaxLength = 20
                Me.columnapellido_paterno.AllowDBNull = false
                Me.columnapellido_paterno.MaxLength = 20
                Me.columnapellido_materno.AllowDBNull = false
                Me.columnapellido_materno.MaxLength = 20
                Me.columndireccion.MaxLength = 2147483647
                Me.columnparentesco.MaxLength = 20
                Me.columnestudiante_matricula.MaxLength = 20
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewtutorRow() As tutorRow
                Return CType(Me.NewRow,tutorRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New tutorRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(tutorRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.tutorRowChangedEvent) Is Nothing) Then
                    RaiseEvent tutorRowChanged(Me, New tutorRowChangeEvent(CType(e.Row,tutorRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.tutorRowChangingEvent) Is Nothing) Then
                    RaiseEvent tutorRowChanging(Me, New tutorRowChangeEvent(CType(e.Row,tutorRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.tutorRowDeletedEvent) Is Nothing) Then
                    RaiseEvent tutorRowDeleted(Me, New tutorRowChangeEvent(CType(e.Row,tutorRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.tutorRowDeletingEvent) Is Nothing) Then
                    RaiseEvent tutorRowDeleting(Me, New tutorRowChangeEvent(CType(e.Row,tutorRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemovetutorRow(ByVal row As tutorRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As Datos = New Datos()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "tutorDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class telefonoDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnid As Global.System.Data.DataColumn
            
            Private columnnumero As Global.System.Data.DataColumn
            
            Private columntutor_dni As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "telefono"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property numeroColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnumero
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property tutor_dniColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columntutor_dni
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As telefonoRow
                Get
                    Return CType(Me.Rows(index),telefonoRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event telefonoRowChanging As telefonoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event telefonoRowChanged As telefonoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event telefonoRowDeleting As telefonoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event telefonoRowDeleted As telefonoRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddtelefonoRow(ByVal row As telefonoRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddtelefonoRow(ByVal numero As String, ByVal parenttutorRowByFK__telefono__tutor___15502E78 As tutorRow) As telefonoRow
                Dim rowtelefonoRow As telefonoRow = CType(Me.NewRow,telefonoRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, numero, Nothing}
                If (Not (parenttutorRowByFK__telefono__tutor___15502E78) Is Nothing) Then
                    columnValuesArray(2) = parenttutorRowByFK__telefono__tutor___15502E78(0)
                End If
                rowtelefonoRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowtelefonoRow)
                Return rowtelefonoRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByid(ByVal id As Integer) As telefonoRow
                Return CType(Me.Rows.Find(New Object() {id}),telefonoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As telefonoDataTable = CType(MyBase.Clone,telefonoDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New telefonoDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnid = MyBase.Columns("id")
                Me.columnnumero = MyBase.Columns("numero")
                Me.columntutor_dni = MyBase.Columns("tutor_dni")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnid)
                Me.columnnumero = New Global.System.Data.DataColumn("numero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnumero)
                Me.columntutor_dni = New Global.System.Data.DataColumn("tutor_dni", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columntutor_dni)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
                Me.columnid.AutoIncrement = true
                Me.columnid.AutoIncrementSeed = -1
                Me.columnid.AutoIncrementStep = -1
                Me.columnid.AllowDBNull = false
                Me.columnid.ReadOnly = true
                Me.columnid.Unique = true
                Me.columnnumero.AllowDBNull = false
                Me.columnnumero.MaxLength = 20
                Me.columntutor_dni.MaxLength = 20
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewtelefonoRow() As telefonoRow
                Return CType(Me.NewRow,telefonoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New telefonoRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(telefonoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.telefonoRowChangedEvent) Is Nothing) Then
                    RaiseEvent telefonoRowChanged(Me, New telefonoRowChangeEvent(CType(e.Row,telefonoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.telefonoRowChangingEvent) Is Nothing) Then
                    RaiseEvent telefonoRowChanging(Me, New telefonoRowChangeEvent(CType(e.Row,telefonoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.telefonoRowDeletedEvent) Is Nothing) Then
                    RaiseEvent telefonoRowDeleted(Me, New telefonoRowChangeEvent(CType(e.Row,telefonoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.telefonoRowDeletingEvent) Is Nothing) Then
                    RaiseEvent telefonoRowDeleting(Me, New telefonoRowChangeEvent(CType(e.Row,telefonoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemovetelefonoRow(ByVal row As telefonoRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As Datos = New Datos()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "telefonoDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class cuentaDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnid As Global.System.Data.DataColumn
            
            Private columnnumero_cuenta As Global.System.Data.DataColumn
            
            Private columntutor_dni As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "cuenta"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property numero_cuentaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnumero_cuenta
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property tutor_dniColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columntutor_dni
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As cuentaRow
                Get
                    Return CType(Me.Rows(index),cuentaRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event cuentaRowChanging As cuentaRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event cuentaRowChanged As cuentaRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event cuentaRowDeleting As cuentaRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event cuentaRowDeleted As cuentaRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddcuentaRow(ByVal row As cuentaRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddcuentaRow(ByVal numero_cuenta As String, ByVal parenttutorRowByFK__cuenta__tutor_dn__182C9B23 As tutorRow) As cuentaRow
                Dim rowcuentaRow As cuentaRow = CType(Me.NewRow,cuentaRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, numero_cuenta, Nothing}
                If (Not (parenttutorRowByFK__cuenta__tutor_dn__182C9B23) Is Nothing) Then
                    columnValuesArray(2) = parenttutorRowByFK__cuenta__tutor_dn__182C9B23(0)
                End If
                rowcuentaRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowcuentaRow)
                Return rowcuentaRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByid(ByVal id As Integer) As cuentaRow
                Return CType(Me.Rows.Find(New Object() {id}),cuentaRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As cuentaDataTable = CType(MyBase.Clone,cuentaDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New cuentaDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnid = MyBase.Columns("id")
                Me.columnnumero_cuenta = MyBase.Columns("numero_cuenta")
                Me.columntutor_dni = MyBase.Columns("tutor_dni")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnid)
                Me.columnnumero_cuenta = New Global.System.Data.DataColumn("numero_cuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnumero_cuenta)
                Me.columntutor_dni = New Global.System.Data.DataColumn("tutor_dni", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columntutor_dni)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
                Me.columnid.AutoIncrement = true
                Me.columnid.AutoIncrementSeed = -1
                Me.columnid.AutoIncrementStep = -1
                Me.columnid.AllowDBNull = false
                Me.columnid.ReadOnly = true
                Me.columnid.Unique = true
                Me.columnnumero_cuenta.AllowDBNull = false
                Me.columnnumero_cuenta.MaxLength = 20
                Me.columntutor_dni.MaxLength = 20
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewcuentaRow() As cuentaRow
                Return CType(Me.NewRow,cuentaRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New cuentaRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(cuentaRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.cuentaRowChangedEvent) Is Nothing) Then
                    RaiseEvent cuentaRowChanged(Me, New cuentaRowChangeEvent(CType(e.Row,cuentaRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.cuentaRowChangingEvent) Is Nothing) Then
                    RaiseEvent cuentaRowChanging(Me, New cuentaRowChangeEvent(CType(e.Row,cuentaRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.cuentaRowDeletedEvent) Is Nothing) Then
                    RaiseEvent cuentaRowDeleted(Me, New cuentaRowChangeEvent(CType(e.Row,cuentaRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.cuentaRowDeletingEvent) Is Nothing) Then
                    RaiseEvent cuentaRowDeleting(Me, New cuentaRowChangeEvent(CType(e.Row,cuentaRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemovecuentaRow(ByVal row As cuentaRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As Datos = New Datos()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "cuentaDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class menuDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnid As Global.System.Data.DataColumn
            
            Private columnnombre As Global.System.Data.DataColumn
            
            Private columnprecio As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "menu"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnombre
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property precioColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnprecio
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As menuRow
                Get
                    Return CType(Me.Rows(index),menuRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event menuRowChanging As menuRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event menuRowChanged As menuRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event menuRowDeleting As menuRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event menuRowDeleted As menuRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddmenuRow(ByVal row As menuRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddmenuRow(ByVal nombre As String, ByVal precio As Double) As menuRow
                Dim rowmenuRow As menuRow = CType(Me.NewRow,menuRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, nombre, precio}
                rowmenuRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowmenuRow)
                Return rowmenuRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByid(ByVal id As Integer) As menuRow
                Return CType(Me.Rows.Find(New Object() {id}),menuRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As menuDataTable = CType(MyBase.Clone,menuDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New menuDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnid = MyBase.Columns("id")
                Me.columnnombre = MyBase.Columns("nombre")
                Me.columnprecio = MyBase.Columns("precio")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnid)
                Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnombre)
                Me.columnprecio = New Global.System.Data.DataColumn("precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnprecio)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
                Me.columnid.AutoIncrement = true
                Me.columnid.AutoIncrementSeed = -1
                Me.columnid.AutoIncrementStep = -1
                Me.columnid.AllowDBNull = false
                Me.columnid.ReadOnly = true
                Me.columnid.Unique = true
                Me.columnnombre.AllowDBNull = false
                Me.columnnombre.MaxLength = 30
                Me.columnprecio.AllowDBNull = false
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewmenuRow() As menuRow
                Return CType(Me.NewRow,menuRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New menuRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(menuRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.menuRowChangedEvent) Is Nothing) Then
                    RaiseEvent menuRowChanged(Me, New menuRowChangeEvent(CType(e.Row,menuRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.menuRowChangingEvent) Is Nothing) Then
                    RaiseEvent menuRowChanging(Me, New menuRowChangeEvent(CType(e.Row,menuRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.menuRowDeletedEvent) Is Nothing) Then
                    RaiseEvent menuRowDeleted(Me, New menuRowChangeEvent(CType(e.Row,menuRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.menuRowDeletingEvent) Is Nothing) Then
                    RaiseEvent menuRowDeleting(Me, New menuRowChangeEvent(CType(e.Row,menuRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemovemenuRow(ByVal row As menuRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As Datos = New Datos()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "menuDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class platoDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnid As Global.System.Data.DataColumn
            
            Private columnnombre As Global.System.Data.DataColumn
            
            Private columnmenu_id As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "plato"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnombre
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property menu_idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnmenu_id
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As platoRow
                Get
                    Return CType(Me.Rows(index),platoRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event platoRowChanging As platoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event platoRowChanged As platoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event platoRowDeleting As platoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event platoRowDeleted As platoRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddplatoRow(ByVal row As platoRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddplatoRow(ByVal nombre As String, ByVal parentmenuRowByFK__plato__menu_id__21B6055D As menuRow) As platoRow
                Dim rowplatoRow As platoRow = CType(Me.NewRow,platoRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, nombre, Nothing}
                If (Not (parentmenuRowByFK__plato__menu_id__21B6055D) Is Nothing) Then
                    columnValuesArray(2) = parentmenuRowByFK__plato__menu_id__21B6055D(0)
                End If
                rowplatoRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowplatoRow)
                Return rowplatoRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByid(ByVal id As Integer) As platoRow
                Return CType(Me.Rows.Find(New Object() {id}),platoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As platoDataTable = CType(MyBase.Clone,platoDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New platoDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnid = MyBase.Columns("id")
                Me.columnnombre = MyBase.Columns("nombre")
                Me.columnmenu_id = MyBase.Columns("menu_id")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnid)
                Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnombre)
                Me.columnmenu_id = New Global.System.Data.DataColumn("menu_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnmenu_id)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
                Me.columnid.AutoIncrement = true
                Me.columnid.AutoIncrementSeed = -1
                Me.columnid.AutoIncrementStep = -1
                Me.columnid.AllowDBNull = false
                Me.columnid.ReadOnly = true
                Me.columnid.Unique = true
                Me.columnnombre.AllowDBNull = false
                Me.columnnombre.MaxLength = 30
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewplatoRow() As platoRow
                Return CType(Me.NewRow,platoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New platoRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(platoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.platoRowChangedEvent) Is Nothing) Then
                    RaiseEvent platoRowChanged(Me, New platoRowChangeEvent(CType(e.Row,platoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.platoRowChangingEvent) Is Nothing) Then
                    RaiseEvent platoRowChanging(Me, New platoRowChangeEvent(CType(e.Row,platoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.platoRowDeletedEvent) Is Nothing) Then
                    RaiseEvent platoRowDeleted(Me, New platoRowChangeEvent(CType(e.Row,platoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.platoRowDeletingEvent) Is Nothing) Then
                    RaiseEvent platoRowDeleting(Me, New platoRowChangeEvent(CType(e.Row,platoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveplatoRow(ByVal row As platoRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As Datos = New Datos()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "platoDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ingredienteDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnid As Global.System.Data.DataColumn
            
            Private columnnombre As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ingrediente"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnnombre
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ingredienteRow
                Get
                    Return CType(Me.Rows(index),ingredienteRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ingredienteRowChanging As ingredienteRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ingredienteRowChanged As ingredienteRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ingredienteRowDeleting As ingredienteRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ingredienteRowDeleted As ingredienteRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddingredienteRow(ByVal row As ingredienteRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddingredienteRow(ByVal nombre As String) As ingredienteRow
                Dim rowingredienteRow As ingredienteRow = CType(Me.NewRow,ingredienteRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, nombre}
                rowingredienteRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowingredienteRow)
                Return rowingredienteRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByid(ByVal id As Integer) As ingredienteRow
                Return CType(Me.Rows.Find(New Object() {id}),ingredienteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ingredienteDataTable = CType(MyBase.Clone,ingredienteDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ingredienteDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnid = MyBase.Columns("id")
                Me.columnnombre = MyBase.Columns("nombre")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnid)
                Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnnombre)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
                Me.columnid.AutoIncrement = true
                Me.columnid.AutoIncrementSeed = -1
                Me.columnid.AutoIncrementStep = -1
                Me.columnid.AllowDBNull = false
                Me.columnid.ReadOnly = true
                Me.columnid.Unique = true
                Me.columnnombre.MaxLength = 30
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewingredienteRow() As ingredienteRow
                Return CType(Me.NewRow,ingredienteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ingredienteRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ingredienteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ingredienteRowChangedEvent) Is Nothing) Then
                    RaiseEvent ingredienteRowChanged(Me, New ingredienteRowChangeEvent(CType(e.Row,ingredienteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ingredienteRowChangingEvent) Is Nothing) Then
                    RaiseEvent ingredienteRowChanging(Me, New ingredienteRowChangeEvent(CType(e.Row,ingredienteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ingredienteRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ingredienteRowDeleted(Me, New ingredienteRowChangeEvent(CType(e.Row,ingredienteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ingredienteRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ingredienteRowDeleting(Me, New ingredienteRowChangeEvent(CType(e.Row,ingredienteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveingredienteRow(ByVal row As ingredienteRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As Datos = New Datos()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ingredienteDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class consumo_menu_estudianteDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnid As Global.System.Data.DataColumn
            
            Private columnestudiante_matricula As Global.System.Data.DataColumn
            
            Private columnmenu_id As Global.System.Data.DataColumn
            
            Private columnfecha As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "consumo_menu_estudiante"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property estudiante_matriculaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnestudiante_matricula
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property menu_idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnmenu_id
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property fechaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnfecha
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As consumo_menu_estudianteRow
                Get
                    Return CType(Me.Rows(index),consumo_menu_estudianteRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event consumo_menu_estudianteRowChanging As consumo_menu_estudianteRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event consumo_menu_estudianteRowChanged As consumo_menu_estudianteRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event consumo_menu_estudianteRowDeleting As consumo_menu_estudianteRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event consumo_menu_estudianteRowDeleted As consumo_menu_estudianteRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub Addconsumo_menu_estudianteRow(ByVal row As consumo_menu_estudianteRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function Addconsumo_menu_estudianteRow(ByVal parentestudianteRowByFK__consumo_m__estud__267ABA7A As estudianteRow, ByVal parentmenuRowByFK__consumo_m__menu___276EDEB3 As menuRow, ByVal fecha As Date) As consumo_menu_estudianteRow
                Dim rowconsumo_menu_estudianteRow As consumo_menu_estudianteRow = CType(Me.NewRow,consumo_menu_estudianteRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, fecha}
                If (Not (parentestudianteRowByFK__consumo_m__estud__267ABA7A) Is Nothing) Then
                    columnValuesArray(1) = parentestudianteRowByFK__consumo_m__estud__267ABA7A(0)
                End If
                If (Not (parentmenuRowByFK__consumo_m__menu___276EDEB3) Is Nothing) Then
                    columnValuesArray(2) = parentmenuRowByFK__consumo_m__menu___276EDEB3(0)
                End If
                rowconsumo_menu_estudianteRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowconsumo_menu_estudianteRow)
                Return rowconsumo_menu_estudianteRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByid(ByVal id As Integer) As consumo_menu_estudianteRow
                Return CType(Me.Rows.Find(New Object() {id}),consumo_menu_estudianteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As consumo_menu_estudianteDataTable = CType(MyBase.Clone,consumo_menu_estudianteDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New consumo_menu_estudianteDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnid = MyBase.Columns("id")
                Me.columnestudiante_matricula = MyBase.Columns("estudiante_matricula")
                Me.columnmenu_id = MyBase.Columns("menu_id")
                Me.columnfecha = MyBase.Columns("fecha")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnid)
                Me.columnestudiante_matricula = New Global.System.Data.DataColumn("estudiante_matricula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnestudiante_matricula)
                Me.columnmenu_id = New Global.System.Data.DataColumn("menu_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnmenu_id)
                Me.columnfecha = New Global.System.Data.DataColumn("fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnfecha)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
                Me.columnid.AutoIncrement = true
                Me.columnid.AutoIncrementSeed = -1
                Me.columnid.AutoIncrementStep = -1
                Me.columnid.AllowDBNull = false
                Me.columnid.ReadOnly = true
                Me.columnid.Unique = true
                Me.columnestudiante_matricula.MaxLength = 20
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Newconsumo_menu_estudianteRow() As consumo_menu_estudianteRow
                Return CType(Me.NewRow,consumo_menu_estudianteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New consumo_menu_estudianteRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(consumo_menu_estudianteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.consumo_menu_estudianteRowChangedEvent) Is Nothing) Then
                    RaiseEvent consumo_menu_estudianteRowChanged(Me, New consumo_menu_estudianteRowChangeEvent(CType(e.Row,consumo_menu_estudianteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.consumo_menu_estudianteRowChangingEvent) Is Nothing) Then
                    RaiseEvent consumo_menu_estudianteRowChanging(Me, New consumo_menu_estudianteRowChangeEvent(CType(e.Row,consumo_menu_estudianteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.consumo_menu_estudianteRowDeletedEvent) Is Nothing) Then
                    RaiseEvent consumo_menu_estudianteRowDeleted(Me, New consumo_menu_estudianteRowChangeEvent(CType(e.Row,consumo_menu_estudianteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.consumo_menu_estudianteRowDeletingEvent) Is Nothing) Then
                    RaiseEvent consumo_menu_estudianteRowDeleting(Me, New consumo_menu_estudianteRowChangeEvent(CType(e.Row,consumo_menu_estudianteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Removeconsumo_menu_estudianteRow(ByVal row As consumo_menu_estudianteRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As Datos = New Datos()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "consumo_menu_estudianteDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ingrediente_alergico_estudianteDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnid As Global.System.Data.DataColumn
            
            Private columnestudiante_matricula As Global.System.Data.DataColumn
            
            Private columningrediente_id As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ingrediente_alergico_estudiante"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property estudiante_matriculaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnestudiante_matricula
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ingrediente_idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columningrediente_id
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ingrediente_alergico_estudianteRow
                Get
                    Return CType(Me.Rows(index),ingrediente_alergico_estudianteRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ingrediente_alergico_estudianteRowChanging As ingrediente_alergico_estudianteRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ingrediente_alergico_estudianteRowChanged As ingrediente_alergico_estudianteRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ingrediente_alergico_estudianteRowDeleting As ingrediente_alergico_estudianteRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ingrediente_alergico_estudianteRowDeleted As ingrediente_alergico_estudianteRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub Addingrediente_alergico_estudianteRow(ByVal row As ingrediente_alergico_estudianteRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function Addingrediente_alergico_estudianteRow(ByVal estudiante_matricula As String, ByVal parentingredienteRowByFK__ingredien__ingre__2B3F6F97 As ingredienteRow) As ingrediente_alergico_estudianteRow
                Dim rowingrediente_alergico_estudianteRow As ingrediente_alergico_estudianteRow = CType(Me.NewRow,ingrediente_alergico_estudianteRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, estudiante_matricula, Nothing}
                If (Not (parentingredienteRowByFK__ingredien__ingre__2B3F6F97) Is Nothing) Then
                    columnValuesArray(2) = parentingredienteRowByFK__ingredien__ingre__2B3F6F97(0)
                End If
                rowingrediente_alergico_estudianteRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowingrediente_alergico_estudianteRow)
                Return rowingrediente_alergico_estudianteRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByid(ByVal id As Integer) As ingrediente_alergico_estudianteRow
                Return CType(Me.Rows.Find(New Object() {id}),ingrediente_alergico_estudianteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ingrediente_alergico_estudianteDataTable = CType(MyBase.Clone,ingrediente_alergico_estudianteDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ingrediente_alergico_estudianteDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnid = MyBase.Columns("id")
                Me.columnestudiante_matricula = MyBase.Columns("estudiante_matricula")
                Me.columningrediente_id = MyBase.Columns("ingrediente_id")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnid)
                Me.columnestudiante_matricula = New Global.System.Data.DataColumn("estudiante_matricula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnestudiante_matricula)
                Me.columningrediente_id = New Global.System.Data.DataColumn("ingrediente_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columningrediente_id)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
                Me.columnid.AutoIncrement = true
                Me.columnid.AutoIncrementSeed = -1
                Me.columnid.AutoIncrementStep = -1
                Me.columnid.AllowDBNull = false
                Me.columnid.ReadOnly = true
                Me.columnid.Unique = true
                Me.columnestudiante_matricula.MaxLength = 20
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Newingrediente_alergico_estudianteRow() As ingrediente_alergico_estudianteRow
                Return CType(Me.NewRow,ingrediente_alergico_estudianteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ingrediente_alergico_estudianteRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ingrediente_alergico_estudianteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ingrediente_alergico_estudianteRowChangedEvent) Is Nothing) Then
                    RaiseEvent ingrediente_alergico_estudianteRowChanged(Me, New ingrediente_alergico_estudianteRowChangeEvent(CType(e.Row,ingrediente_alergico_estudianteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ingrediente_alergico_estudianteRowChangingEvent) Is Nothing) Then
                    RaiseEvent ingrediente_alergico_estudianteRowChanging(Me, New ingrediente_alergico_estudianteRowChangeEvent(CType(e.Row,ingrediente_alergico_estudianteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ingrediente_alergico_estudianteRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ingrediente_alergico_estudianteRowDeleted(Me, New ingrediente_alergico_estudianteRowChangeEvent(CType(e.Row,ingrediente_alergico_estudianteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ingrediente_alergico_estudianteRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ingrediente_alergico_estudianteRowDeleting(Me, New ingrediente_alergico_estudianteRowChangeEvent(CType(e.Row,ingrediente_alergico_estudianteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Removeingrediente_alergico_estudianteRow(ByVal row As ingrediente_alergico_estudianteRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As Datos = New Datos()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ingrediente_alergico_estudianteDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class cargoDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnid As Global.System.Data.DataColumn
            
            Private columntotal As Global.System.Data.DataColumn
            
            Private columntutor_dni As Global.System.Data.DataColumn
            
            Private columnestudiante_matricula As Global.System.Data.DataColumn
            
            Private columncuenta_id As Global.System.Data.DataColumn
            
            Private columnfecha As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "cargo"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property totalColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columntotal
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property tutor_dniColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columntutor_dni
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property estudiante_matriculaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnestudiante_matricula
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property cuenta_idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columncuenta_id
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property fechaColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnfecha
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As cargoRow
                Get
                    Return CType(Me.Rows(index),cargoRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event cargoRowChanging As cargoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event cargoRowChanged As cargoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event cargoRowDeleting As cargoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event cargoRowDeleted As cargoRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddcargoRow(ByVal row As cargoRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddcargoRow(ByVal total As Double, ByVal tutor_dni As String, ByVal estudiante_matricula As String, ByVal cuenta_id As Integer, ByVal fecha As Date) As cargoRow
                Dim rowcargoRow As cargoRow = CType(Me.NewRow,cargoRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, total, tutor_dni, estudiante_matricula, cuenta_id, fecha}
                rowcargoRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowcargoRow)
                Return rowcargoRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByid(ByVal id As Integer) As cargoRow
                Return CType(Me.Rows.Find(New Object() {id}),cargoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As cargoDataTable = CType(MyBase.Clone,cargoDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New cargoDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnid = MyBase.Columns("id")
                Me.columntotal = MyBase.Columns("total")
                Me.columntutor_dni = MyBase.Columns("tutor_dni")
                Me.columnestudiante_matricula = MyBase.Columns("estudiante_matricula")
                Me.columncuenta_id = MyBase.Columns("cuenta_id")
                Me.columnfecha = MyBase.Columns("fecha")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnid)
                Me.columntotal = New Global.System.Data.DataColumn("total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columntotal)
                Me.columntutor_dni = New Global.System.Data.DataColumn("tutor_dni", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columntutor_dni)
                Me.columnestudiante_matricula = New Global.System.Data.DataColumn("estudiante_matricula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnestudiante_matricula)
                Me.columncuenta_id = New Global.System.Data.DataColumn("cuenta_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columncuenta_id)
                Me.columnfecha = New Global.System.Data.DataColumn("fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnfecha)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
                Me.columnid.AutoIncrement = true
                Me.columnid.AutoIncrementSeed = -1
                Me.columnid.AutoIncrementStep = -1
                Me.columnid.AllowDBNull = false
                Me.columnid.ReadOnly = true
                Me.columnid.Unique = true
                Me.columntotal.AllowDBNull = false
                Me.columntutor_dni.MaxLength = 20
                Me.columnestudiante_matricula.MaxLength = 20
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewcargoRow() As cargoRow
                Return CType(Me.NewRow,cargoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New cargoRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(cargoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.cargoRowChangedEvent) Is Nothing) Then
                    RaiseEvent cargoRowChanged(Me, New cargoRowChangeEvent(CType(e.Row,cargoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.cargoRowChangingEvent) Is Nothing) Then
                    RaiseEvent cargoRowChanging(Me, New cargoRowChangeEvent(CType(e.Row,cargoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.cargoRowDeletedEvent) Is Nothing) Then
                    RaiseEvent cargoRowDeleted(Me, New cargoRowChangeEvent(CType(e.Row,cargoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.cargoRowDeletingEvent) Is Nothing) Then
                    RaiseEvent cargoRowDeleting(Me, New cargoRowChangeEvent(CType(e.Row,cargoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemovecargoRow(ByVal row As cargoRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As Datos = New Datos()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "cargoDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ingrediente_platoDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnid As Global.System.Data.DataColumn
            
            Private columnplato_id As Global.System.Data.DataColumn
            
            Private columningrediente_id As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ingrediente_plato"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property plato_idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnplato_id
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property ingrediente_idColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columningrediente_id
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ingrediente_platoRow
                Get
                    Return CType(Me.Rows(index),ingrediente_platoRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ingrediente_platoRowChanging As ingrediente_platoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ingrediente_platoRowChanged As ingrediente_platoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ingrediente_platoRowDeleting As ingrediente_platoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ingrediente_platoRowDeleted As ingrediente_platoRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub Addingrediente_platoRow(ByVal row As ingrediente_platoRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function Addingrediente_platoRow(ByVal plato_id As Integer, ByVal parentingredienteRowByFK__ingredien__ingre__2F10007B As ingredienteRow) As ingrediente_platoRow
                Dim rowingrediente_platoRow As ingrediente_platoRow = CType(Me.NewRow,ingrediente_platoRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, plato_id, Nothing}
                If (Not (parentingredienteRowByFK__ingredien__ingre__2F10007B) Is Nothing) Then
                    columnValuesArray(2) = parentingredienteRowByFK__ingredien__ingre__2F10007B(0)
                End If
                rowingrediente_platoRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowingrediente_platoRow)
                Return rowingrediente_platoRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByid(ByVal id As Integer) As ingrediente_platoRow
                Return CType(Me.Rows.Find(New Object() {id}),ingrediente_platoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ingrediente_platoDataTable = CType(MyBase.Clone,ingrediente_platoDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ingrediente_platoDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnid = MyBase.Columns("id")
                Me.columnplato_id = MyBase.Columns("plato_id")
                Me.columningrediente_id = MyBase.Columns("ingrediente_id")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnid)
                Me.columnplato_id = New Global.System.Data.DataColumn("plato_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnplato_id)
                Me.columningrediente_id = New Global.System.Data.DataColumn("ingrediente_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columningrediente_id)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
                Me.columnid.AutoIncrement = true
                Me.columnid.AutoIncrementSeed = -1
                Me.columnid.AutoIncrementStep = -1
                Me.columnid.AllowDBNull = false
                Me.columnid.ReadOnly = true
                Me.columnid.Unique = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Newingrediente_platoRow() As ingrediente_platoRow
                Return CType(Me.NewRow,ingrediente_platoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ingrediente_platoRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ingrediente_platoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ingrediente_platoRowChangedEvent) Is Nothing) Then
                    RaiseEvent ingrediente_platoRowChanged(Me, New ingrediente_platoRowChangeEvent(CType(e.Row,ingrediente_platoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ingrediente_platoRowChangingEvent) Is Nothing) Then
                    RaiseEvent ingrediente_platoRowChanging(Me, New ingrediente_platoRowChangeEvent(CType(e.Row,ingrediente_platoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ingrediente_platoRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ingrediente_platoRowDeleted(Me, New ingrediente_platoRowChangeEvent(CType(e.Row,ingrediente_platoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ingrediente_platoRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ingrediente_platoRowDeleting(Me, New ingrediente_platoRowChangeEvent(CType(e.Row,ingrediente_platoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Removeingrediente_platoRow(ByVal row As ingrediente_platoRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As Datos = New Datos()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ingrediente_platoDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class estudianteRow
            Inherits Global.System.Data.DataRow
            
            Private tableestudiante As estudianteDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableestudiante = CType(Me.Table,estudianteDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property matricula() As String
                Get
                    Return CType(Me(Me.tableestudiante.matriculaColumn),String)
                End Get
                Set
                    Me(Me.tableestudiante.matriculaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property nombre() As String
                Get
                    Return CType(Me(Me.tableestudiante.nombreColumn),String)
                End Get
                Set
                    Me(Me.tableestudiante.nombreColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property apellido_paterno() As String
                Get
                    Try 
                        Return CType(Me(Me.tableestudiante.apellido_paternoColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'apellido_paterno' in table 'estudiante' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableestudiante.apellido_paternoColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property apellido_materno() As String
                Get
                    Try 
                        Return CType(Me(Me.tableestudiante.apellido_maternoColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'apellido_materno' in table 'estudiante' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableestudiante.apellido_maternoColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property fecha_ingreso() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableestudiante.fecha_ingresoColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'fecha_ingreso' in table 'estudiante' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableestudiante.fecha_ingresoColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property fecha_baja() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableestudiante.fecha_bajaColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'fecha_baja' in table 'estudiante' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableestudiante.fecha_bajaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Isapellido_paternoNull() As Boolean
                Return Me.IsNull(Me.tableestudiante.apellido_paternoColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setapellido_paternoNull()
                Me(Me.tableestudiante.apellido_paternoColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Isapellido_maternoNull() As Boolean
                Return Me.IsNull(Me.tableestudiante.apellido_maternoColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setapellido_maternoNull()
                Me(Me.tableestudiante.apellido_maternoColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Isfecha_ingresoNull() As Boolean
                Return Me.IsNull(Me.tableestudiante.fecha_ingresoColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setfecha_ingresoNull()
                Me(Me.tableestudiante.fecha_ingresoColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Isfecha_bajaNull() As Boolean
                Return Me.IsNull(Me.tableestudiante.fecha_bajaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setfecha_bajaNull()
                Me(Me.tableestudiante.fecha_bajaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function GettutorRows() As tutorRow()
                If (Me.Table.ChildRelations("FK__tutor__estudiant__1273C1CD") Is Nothing) Then
                    Return New tutorRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__tutor__estudiant__1273C1CD")),tutorRow())
                End If
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Getconsumo_menu_estudianteRows() As consumo_menu_estudianteRow()
                If (Me.Table.ChildRelations("FK__consumo_m__estud__267ABA7A") Is Nothing) Then
                    Return New consumo_menu_estudianteRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__consumo_m__estud__267ABA7A")),consumo_menu_estudianteRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class tutorRow
            Inherits Global.System.Data.DataRow
            
            Private tabletutor As tutorDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tabletutor = CType(Me.Table,tutorDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property dni() As String
                Get
                    Return CType(Me(Me.tabletutor.dniColumn),String)
                End Get
                Set
                    Me(Me.tabletutor.dniColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property nombre() As String
                Get
                    Return CType(Me(Me.tabletutor.nombreColumn),String)
                End Get
                Set
                    Me(Me.tabletutor.nombreColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property apellido_paterno() As String
                Get
                    Return CType(Me(Me.tabletutor.apellido_paternoColumn),String)
                End Get
                Set
                    Me(Me.tabletutor.apellido_paternoColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property apellido_materno() As String
                Get
                    Return CType(Me(Me.tabletutor.apellido_maternoColumn),String)
                End Get
                Set
                    Me(Me.tabletutor.apellido_maternoColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property direccion() As String
                Get
                    Try 
                        Return CType(Me(Me.tabletutor.direccionColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'direccion' in table 'tutor' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tabletutor.direccionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property parentesco() As String
                Get
                    Try 
                        Return CType(Me(Me.tabletutor.parentescoColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'parentesco' in table 'tutor' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tabletutor.parentescoColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property estudiante_matricula() As String
                Get
                    Try 
                        Return CType(Me(Me.tabletutor.estudiante_matriculaColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'estudiante_matricula' in table 'tutor' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tabletutor.estudiante_matriculaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property estudianteRow() As estudianteRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__tutor__estudiant__1273C1CD")),estudianteRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK__tutor__estudiant__1273C1CD"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsdireccionNull() As Boolean
                Return Me.IsNull(Me.tabletutor.direccionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetdireccionNull()
                Me(Me.tabletutor.direccionColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsparentescoNull() As Boolean
                Return Me.IsNull(Me.tabletutor.parentescoColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetparentescoNull()
                Me(Me.tabletutor.parentescoColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Isestudiante_matriculaNull() As Boolean
                Return Me.IsNull(Me.tabletutor.estudiante_matriculaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setestudiante_matriculaNull()
                Me(Me.tabletutor.estudiante_matriculaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function GettelefonoRows() As telefonoRow()
                If (Me.Table.ChildRelations("FK__telefono__tutor___15502E78") Is Nothing) Then
                    Return New telefonoRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__telefono__tutor___15502E78")),telefonoRow())
                End If
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function GetcuentaRows() As cuentaRow()
                If (Me.Table.ChildRelations("FK__cuenta__tutor_dn__182C9B23") Is Nothing) Then
                    Return New cuentaRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__cuenta__tutor_dn__182C9B23")),cuentaRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class telefonoRow
            Inherits Global.System.Data.DataRow
            
            Private tabletelefono As telefonoDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tabletelefono = CType(Me.Table,telefonoDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property id() As Integer
                Get
                    Return CType(Me(Me.tabletelefono.idColumn),Integer)
                End Get
                Set
                    Me(Me.tabletelefono.idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property numero() As String
                Get
                    Return CType(Me(Me.tabletelefono.numeroColumn),String)
                End Get
                Set
                    Me(Me.tabletelefono.numeroColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property tutor_dni() As String
                Get
                    Try 
                        Return CType(Me(Me.tabletelefono.tutor_dniColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'tutor_dni' in table 'telefono' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tabletelefono.tutor_dniColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property tutorRow() As tutorRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__telefono__tutor___15502E78")),tutorRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK__telefono__tutor___15502E78"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Istutor_dniNull() As Boolean
                Return Me.IsNull(Me.tabletelefono.tutor_dniColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Settutor_dniNull()
                Me(Me.tabletelefono.tutor_dniColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class cuentaRow
            Inherits Global.System.Data.DataRow
            
            Private tablecuenta As cuentaDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tablecuenta = CType(Me.Table,cuentaDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property id() As Integer
                Get
                    Return CType(Me(Me.tablecuenta.idColumn),Integer)
                End Get
                Set
                    Me(Me.tablecuenta.idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property numero_cuenta() As String
                Get
                    Return CType(Me(Me.tablecuenta.numero_cuentaColumn),String)
                End Get
                Set
                    Me(Me.tablecuenta.numero_cuentaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property tutor_dni() As String
                Get
                    Try 
                        Return CType(Me(Me.tablecuenta.tutor_dniColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'tutor_dni' in table 'cuenta' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecuenta.tutor_dniColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property tutorRow() As tutorRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__cuenta__tutor_dn__182C9B23")),tutorRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK__cuenta__tutor_dn__182C9B23"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Istutor_dniNull() As Boolean
                Return Me.IsNull(Me.tablecuenta.tutor_dniColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Settutor_dniNull()
                Me(Me.tablecuenta.tutor_dniColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class menuRow
            Inherits Global.System.Data.DataRow
            
            Private tablemenu As menuDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tablemenu = CType(Me.Table,menuDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property id() As Integer
                Get
                    Return CType(Me(Me.tablemenu.idColumn),Integer)
                End Get
                Set
                    Me(Me.tablemenu.idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property nombre() As String
                Get
                    Return CType(Me(Me.tablemenu.nombreColumn),String)
                End Get
                Set
                    Me(Me.tablemenu.nombreColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property precio() As Double
                Get
                    Return CType(Me(Me.tablemenu.precioColumn),Double)
                End Get
                Set
                    Me(Me.tablemenu.precioColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function GetplatoRows() As platoRow()
                If (Me.Table.ChildRelations("FK__plato__menu_id__21B6055D") Is Nothing) Then
                    Return New platoRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__plato__menu_id__21B6055D")),platoRow())
                End If
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Getconsumo_menu_estudianteRows() As consumo_menu_estudianteRow()
                If (Me.Table.ChildRelations("FK__consumo_m__menu___276EDEB3") Is Nothing) Then
                    Return New consumo_menu_estudianteRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__consumo_m__menu___276EDEB3")),consumo_menu_estudianteRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class platoRow
            Inherits Global.System.Data.DataRow
            
            Private tableplato As platoDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableplato = CType(Me.Table,platoDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property id() As Integer
                Get
                    Return CType(Me(Me.tableplato.idColumn),Integer)
                End Get
                Set
                    Me(Me.tableplato.idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property nombre() As String
                Get
                    Return CType(Me(Me.tableplato.nombreColumn),String)
                End Get
                Set
                    Me(Me.tableplato.nombreColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property menu_id() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableplato.menu_idColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'menu_id' in table 'plato' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableplato.menu_idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property menuRow() As menuRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__plato__menu_id__21B6055D")),menuRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK__plato__menu_id__21B6055D"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Ismenu_idNull() As Boolean
                Return Me.IsNull(Me.tableplato.menu_idColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setmenu_idNull()
                Me(Me.tableplato.menu_idColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ingredienteRow
            Inherits Global.System.Data.DataRow
            
            Private tableingrediente As ingredienteDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableingrediente = CType(Me.Table,ingredienteDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property id() As Integer
                Get
                    Return CType(Me(Me.tableingrediente.idColumn),Integer)
                End Get
                Set
                    Me(Me.tableingrediente.idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property nombre() As String
                Get
                    Try 
                        Return CType(Me(Me.tableingrediente.nombreColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'nombre' in table 'ingrediente' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableingrediente.nombreColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsnombreNull() As Boolean
                Return Me.IsNull(Me.tableingrediente.nombreColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetnombreNull()
                Me(Me.tableingrediente.nombreColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Getingrediente_alergico_estudianteRows() As ingrediente_alergico_estudianteRow()
                If (Me.Table.ChildRelations("FK__ingredien__ingre__2B3F6F97") Is Nothing) Then
                    Return New ingrediente_alergico_estudianteRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__ingredien__ingre__2B3F6F97")),ingrediente_alergico_estudianteRow())
                End If
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Getingrediente_platoRows() As ingrediente_platoRow()
                If (Me.Table.ChildRelations("FK__ingredien__ingre__2F10007B") Is Nothing) Then
                    Return New ingrediente_platoRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__ingredien__ingre__2F10007B")),ingrediente_platoRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class consumo_menu_estudianteRow
            Inherits Global.System.Data.DataRow
            
            Private tableconsumo_menu_estudiante As consumo_menu_estudianteDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableconsumo_menu_estudiante = CType(Me.Table,consumo_menu_estudianteDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property id() As Integer
                Get
                    Return CType(Me(Me.tableconsumo_menu_estudiante.idColumn),Integer)
                End Get
                Set
                    Me(Me.tableconsumo_menu_estudiante.idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property estudiante_matricula() As String
                Get
                    Try 
                        Return CType(Me(Me.tableconsumo_menu_estudiante.estudiante_matriculaColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'estudiante_matricula' in table 'consumo_menu_estudiante' is"& _ 
                                " DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableconsumo_menu_estudiante.estudiante_matriculaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property menu_id() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableconsumo_menu_estudiante.menu_idColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'menu_id' in table 'consumo_menu_estudiante' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableconsumo_menu_estudiante.menu_idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property fecha() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableconsumo_menu_estudiante.fechaColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'fecha' in table 'consumo_menu_estudiante' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableconsumo_menu_estudiante.fechaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property estudianteRow() As estudianteRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__consumo_m__estud__267ABA7A")),estudianteRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK__consumo_m__estud__267ABA7A"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property menuRow() As menuRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__consumo_m__menu___276EDEB3")),menuRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK__consumo_m__menu___276EDEB3"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Isestudiante_matriculaNull() As Boolean
                Return Me.IsNull(Me.tableconsumo_menu_estudiante.estudiante_matriculaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setestudiante_matriculaNull()
                Me(Me.tableconsumo_menu_estudiante.estudiante_matriculaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Ismenu_idNull() As Boolean
                Return Me.IsNull(Me.tableconsumo_menu_estudiante.menu_idColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setmenu_idNull()
                Me(Me.tableconsumo_menu_estudiante.menu_idColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsfechaNull() As Boolean
                Return Me.IsNull(Me.tableconsumo_menu_estudiante.fechaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetfechaNull()
                Me(Me.tableconsumo_menu_estudiante.fechaColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ingrediente_alergico_estudianteRow
            Inherits Global.System.Data.DataRow
            
            Private tableingrediente_alergico_estudiante As ingrediente_alergico_estudianteDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableingrediente_alergico_estudiante = CType(Me.Table,ingrediente_alergico_estudianteDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property id() As Integer
                Get
                    Return CType(Me(Me.tableingrediente_alergico_estudiante.idColumn),Integer)
                End Get
                Set
                    Me(Me.tableingrediente_alergico_estudiante.idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property estudiante_matricula() As String
                Get
                    Try 
                        Return CType(Me(Me.tableingrediente_alergico_estudiante.estudiante_matriculaColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'estudiante_matricula' in table 'ingrediente_alergico_estudi"& _ 
                                "ante' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableingrediente_alergico_estudiante.estudiante_matriculaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ingrediente_id() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableingrediente_alergico_estudiante.ingrediente_idColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ingrediente_id' in table 'ingrediente_alergico_estudiante' "& _ 
                                "is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableingrediente_alergico_estudiante.ingrediente_idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ingredienteRow() As ingredienteRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__ingredien__ingre__2B3F6F97")),ingredienteRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK__ingredien__ingre__2B3F6F97"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Isestudiante_matriculaNull() As Boolean
                Return Me.IsNull(Me.tableingrediente_alergico_estudiante.estudiante_matriculaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setestudiante_matriculaNull()
                Me(Me.tableingrediente_alergico_estudiante.estudiante_matriculaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Isingrediente_idNull() As Boolean
                Return Me.IsNull(Me.tableingrediente_alergico_estudiante.ingrediente_idColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setingrediente_idNull()
                Me(Me.tableingrediente_alergico_estudiante.ingrediente_idColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class cargoRow
            Inherits Global.System.Data.DataRow
            
            Private tablecargo As cargoDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tablecargo = CType(Me.Table,cargoDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property id() As Integer
                Get
                    Return CType(Me(Me.tablecargo.idColumn),Integer)
                End Get
                Set
                    Me(Me.tablecargo.idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property total() As Double
                Get
                    Return CType(Me(Me.tablecargo.totalColumn),Double)
                End Get
                Set
                    Me(Me.tablecargo.totalColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property tutor_dni() As String
                Get
                    Try 
                        Return CType(Me(Me.tablecargo.tutor_dniColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'tutor_dni' in table 'cargo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecargo.tutor_dniColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property estudiante_matricula() As String
                Get
                    Try 
                        Return CType(Me(Me.tablecargo.estudiante_matriculaColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'estudiante_matricula' in table 'cargo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecargo.estudiante_matriculaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property cuenta_id() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tablecargo.cuenta_idColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'cuenta_id' in table 'cargo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecargo.cuenta_idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property fecha() As Date
                Get
                    Try 
                        Return CType(Me(Me.tablecargo.fechaColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'fecha' in table 'cargo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tablecargo.fechaColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Istutor_dniNull() As Boolean
                Return Me.IsNull(Me.tablecargo.tutor_dniColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Settutor_dniNull()
                Me(Me.tablecargo.tutor_dniColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Isestudiante_matriculaNull() As Boolean
                Return Me.IsNull(Me.tablecargo.estudiante_matriculaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setestudiante_matriculaNull()
                Me(Me.tablecargo.estudiante_matriculaColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Iscuenta_idNull() As Boolean
                Return Me.IsNull(Me.tablecargo.cuenta_idColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setcuenta_idNull()
                Me(Me.tablecargo.cuenta_idColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsfechaNull() As Boolean
                Return Me.IsNull(Me.tablecargo.fechaColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetfechaNull()
                Me(Me.tablecargo.fechaColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ingrediente_platoRow
            Inherits Global.System.Data.DataRow
            
            Private tableingrediente_plato As ingrediente_platoDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableingrediente_plato = CType(Me.Table,ingrediente_platoDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property id() As Integer
                Get
                    Return CType(Me(Me.tableingrediente_plato.idColumn),Integer)
                End Get
                Set
                    Me(Me.tableingrediente_plato.idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property plato_id() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableingrediente_plato.plato_idColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'plato_id' in table 'ingrediente_plato' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableingrediente_plato.plato_idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ingrediente_id() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableingrediente_plato.ingrediente_idColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ingrediente_id' in table 'ingrediente_plato' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableingrediente_plato.ingrediente_idColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ingredienteRow() As ingredienteRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__ingredien__ingre__2F10007B")),ingredienteRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK__ingredien__ingre__2F10007B"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Isplato_idNull() As Boolean
                Return Me.IsNull(Me.tableingrediente_plato.plato_idColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setplato_idNull()
                Me(Me.tableingrediente_plato.plato_idColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Isingrediente_idNull() As Boolean
                Return Me.IsNull(Me.tableingrediente_plato.ingrediente_idColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub Setingrediente_idNull()
                Me(Me.tableingrediente_plato.ingrediente_idColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class estudianteRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As estudianteRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As estudianteRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As estudianteRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class tutorRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As tutorRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As tutorRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As tutorRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class telefonoRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As telefonoRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As telefonoRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As telefonoRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class cuentaRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As cuentaRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As cuentaRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As cuentaRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class menuRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As menuRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As menuRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As menuRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class platoRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As platoRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As platoRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As platoRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class ingredienteRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ingredienteRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As ingredienteRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As ingredienteRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class consumo_menu_estudianteRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As consumo_menu_estudianteRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As consumo_menu_estudianteRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As consumo_menu_estudianteRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class ingrediente_alergico_estudianteRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ingrediente_alergico_estudianteRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As ingrediente_alergico_estudianteRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As ingrediente_alergico_estudianteRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class cargoRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As cargoRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As cargoRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As cargoRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class ingrediente_platoRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ingrediente_platoRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As ingrediente_platoRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As ingrediente_platoRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_get_all_studentsCompletedEventHandler(ByVal sender As Object, ByVal e As WS_get_all_studentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_get_all_studentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_create_studentCompletedEventHandler(ByVal sender As Object, ByVal e As WS_create_studentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_create_studentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_find_studentCompletedEventHandler(ByVal sender As Object, ByVal e As WS_find_studentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_find_studentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_update_studentCompletedEventHandler(ByVal sender As Object, ByVal e As WS_update_studentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_update_studentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_delete_studentCompletedEventHandler(ByVal sender As Object, ByVal e As WS_delete_studentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_delete_studentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_get_all_tutorsCompletedEventHandler(ByVal sender As Object, ByVal e As WS_get_all_tutorsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_get_all_tutorsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_find_tutorCompletedEventHandler(ByVal sender As Object, ByVal e As WS_find_tutorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_find_tutorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_update_tutorCompletedEventHandler(ByVal sender As Object, ByVal e As WS_update_tutorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_update_tutorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_delete_tutorCompletedEventHandler(ByVal sender As Object, ByVal e As WS_delete_tutorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_delete_tutorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_create_tutorCompletedEventHandler(ByVal sender As Object, ByVal e As WS_create_tutorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_create_tutorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_get_all_phonesCompletedEventHandler(ByVal sender As Object, ByVal e As WS_get_all_phonesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_get_all_phonesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_create_phoneCompletedEventHandler(ByVal sender As Object, ByVal e As WS_create_phoneCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_create_phoneCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_update_phoneCompletedEventHandler(ByVal sender As Object, ByVal e As WS_update_phoneCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_update_phoneCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_find_phoneCompletedEventHandler(ByVal sender As Object, ByVal e As WS_find_phoneCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_find_phoneCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_delete_phoneCompletedEventHandler(ByVal sender As Object, ByVal e As WS_delete_phoneCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_delete_phoneCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_get_all_accountsCompletedEventHandler(ByVal sender As Object, ByVal e As WS_get_all_accountsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_get_all_accountsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_create_accountCompletedEventHandler(ByVal sender As Object, ByVal e As WS_create_accountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_create_accountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_find_accoutCompletedEventHandler(ByVal sender As Object, ByVal e As WS_find_accoutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_find_accoutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_update_accountCompletedEventHandler(ByVal sender As Object, ByVal e As WS_update_accountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_update_accountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_delete_accountCompletedEventHandler(ByVal sender As Object, ByVal e As WS_delete_accountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_delete_accountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_get_all_chargesCompletedEventHandler(ByVal sender As Object, ByVal e As WS_get_all_chargesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_get_all_chargesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_create_chargeCompletedEventHandler(ByVal sender As Object, ByVal e As WS_create_chargeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_create_chargeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub Ws_update_chargeCompletedEventHandler(ByVal sender As Object, ByVal e As Ws_update_chargeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Ws_update_chargeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_find_chargeCompletedEventHandler(ByVal sender As Object, ByVal e As WS_find_chargeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_find_chargeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_delete_chargeCompletedEventHandler(ByVal sender As Object, ByVal e As WS_delete_chargeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_delete_chargeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_get_all_menusCompletedEventHandler(ByVal sender As Object, ByVal e As WS_get_all_menusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_get_all_menusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_create_menuCompletedEventHandler(ByVal sender As Object, ByVal e As WS_create_menuCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_create_menuCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_find_menuCompletedEventHandler(ByVal sender As Object, ByVal e As WS_find_menuCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_find_menuCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_update_menuCompletedEventHandler(ByVal sender As Object, ByVal e As WS_update_menuCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_update_menuCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_delete_menuCompletedEventHandler(ByVal sender As Object, ByVal e As WS_delete_menuCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_delete_menuCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_get_all_saucersCompletedEventHandler(ByVal sender As Object, ByVal e As WS_get_all_saucersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_get_all_saucersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_create_saucerCompletedEventHandler(ByVal sender As Object, ByVal e As WS_create_saucerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_create_saucerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_find_saucerCompletedEventHandler(ByVal sender As Object, ByVal e As WS_find_saucerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_find_saucerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_update_saucerCompletedEventHandler(ByVal sender As Object, ByVal e As WS_update_saucerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_update_saucerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_delete_saucerCompletedEventHandler(ByVal sender As Object, ByVal e As WS_delete_saucerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_delete_saucerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_get_all_consumptionsCompletedEventHandler(ByVal sender As Object, ByVal e As WS_get_all_consumptionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_get_all_consumptionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_create_consumptionCompletedEventHandler(ByVal sender As Object, ByVal e As WS_create_consumptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_create_consumptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_find_consumptionCompletedEventHandler(ByVal sender As Object, ByVal e As WS_find_consumptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_find_consumptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_update_consumptionCompletedEventHandler(ByVal sender As Object, ByVal e As WS_update_consumptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_update_consumptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_delete_consumptionCompletedEventHandler(ByVal sender As Object, ByVal e As WS_delete_consumptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_delete_consumptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_get_all_ingredientsCompletedEventHandler(ByVal sender As Object, ByVal e As WS_get_all_ingredientsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_get_all_ingredientsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_create_ingredientCompletedEventHandler(ByVal sender As Object, ByVal e As WS_create_ingredientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_create_ingredientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_find_ingredientCompletedEventHandler(ByVal sender As Object, ByVal e As WS_find_ingredientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_find_ingredientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_update_ingredientCompletedEventHandler(ByVal sender As Object, ByVal e As WS_update_ingredientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_update_ingredientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_delete_ingredientCompletedEventHandler(ByVal sender As Object, ByVal e As WS_delete_ingredientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_delete_ingredientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_get_all_ingredients_saucersCompletedEventHandler(ByVal sender As Object, ByVal e As WS_get_all_ingredients_saucersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_get_all_ingredients_saucersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_create_ingredient_saucerCompletedEventHandler(ByVal sender As Object, ByVal e As WS_create_ingredient_saucerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_create_ingredient_saucerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_find_ingredient_saucerCompletedEventHandler(ByVal sender As Object, ByVal e As WS_find_ingredient_saucerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_find_ingredient_saucerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_update_ingredient_saucerCompletedEventHandler(ByVal sender As Object, ByVal e As WS_update_ingredient_saucerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_update_ingredient_saucerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_delete_ingredient_saucerCompletedEventHandler(ByVal sender As Object, ByVal e As WS_delete_ingredient_saucerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_delete_ingredient_saucerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_get_all_allergiesCompletedEventHandler(ByVal sender As Object, ByVal e As WS_get_all_allergiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_get_all_allergiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_create_alergyCompletedEventHandler(ByVal sender As Object, ByVal e As WS_create_alergyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_create_alergyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_find_allergyCompletedEventHandler(ByVal sender As Object, ByVal e As WS_find_allergyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_find_allergyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Datos
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Datos)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_update_alergyCompletedEventHandler(ByVal sender As Object, ByVal e As WS_update_alergyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_update_alergyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub WS_delete_alergyCompletedEventHandler(ByVal sender As Object, ByVal e As WS_delete_alergyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_delete_alergyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
